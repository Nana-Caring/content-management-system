@page
@model CMS.Web.Pages.Portal.IndexModel
@{
    ViewData["Title"] = "Portal";
}



<style>
body, .container {
    background: linear-gradient(135deg, #e0eafc 0%, #cfdef3 100%);
}
.glass-card {
    background: rgba(255,255,255,0.55);
    border-radius: 1.5rem;
    box-shadow: 0 8px 32px 0 rgba(31,38,135,0.18);
    backdrop-filter: blur(8px);
    border: 1px solid rgba(255,255,255,0.18);
}
.glass-header {
    background: linear-gradient(90deg, #a1c4fd 0%, #c2e9fb 100%);
    color: #333;
    border-bottom: 1px solid #e3e3e3;
    border-radius: 1.5rem 1.5rem 0 0;
    box-shadow: 0 2px 8px rgba(161,196,253,0.10);
}
.glass-table th, .glass-table td {
    background: rgba(255,255,255,0.85);
    border: none;
}
.glass-table tr {
    transition: background 0.2s;
}
.glass-table tr:hover {
    background: #f0f8ff;
}
.btn-glass {
    background: linear-gradient(90deg, #fbc2eb 0%, #a6c1ee 100%);
    border: none;
    color: #333;
    box-shadow: 0 2px 8px rgba(161,196,253,0.10);
}
.btn-glass:active, .btn-glass:focus {
    background: linear-gradient(90deg, #a6c1ee 0%, #fbc2eb 100%);
    color: #333;
}
.badge-glass {
    background: linear-gradient(90deg, #fbc2eb 0%, #a6c1ee 100%);
    color: #333;
    border-radius: 1rem;
    font-weight: 500;
}
</style>

<div class="container py-5" style="border: 2px solid #e3e3e3; border-radius: 2rem; box-shadow: 0 8px 32px 0 rgba(31,38,135,0.10); background: rgba(255,255,255,0.15);">
    <div class="row mb-4">
        <div class="col-12 text-center">
            <h2 class="fw-bold mb-2 glass-header">Client Portal</h2>
            <p class="text-muted">Welcome to your personal portal. View and manage your profile, accounts, and transactions.</p>
        </div>
    </div>
    <div class="row g-4 mb-4">
        <div class="col-12 col-lg-4">
            <div class="glass-card">
                <div class="card-body p-4">
                    <div class="d-flex align-items-center mb-3">
                        <div class="rounded-circle bg-light d-flex align-items-center justify-content-center me-3 border shadow" style="width:64px;height:64px;box-shadow:0 2px 8px rgba(0,123,255,0.10);">
                            <i class="bi bi-person-circle" style="font-size:2.5rem;color:#007bff;"></i>
                        </div>
                        <div>
                            <h4 class="fw-bold mb-0" id="userFullName">-</h4>
                        </div>
                    </div>
                    <dl class="row mb-0 small">
                        <dt class="col-sm-5">First Name</dt>
                        <dd class="col-sm-7" id="userFirstName">-</dd>
                        <dt class="col-sm-5">Surname</dt>
                        <dd class="col-sm-7" id="userSurname">-</dd>
                        <dt class="col-sm-5">Email</dt>
                        <dd class="col-sm-7" id="userEmail">-</dd>
                        <dt class="col-sm-5">Phone</dt>
                        <dd class="col-sm-7" id="userPhone">-</dd>
                        <dt class="col-sm-5">Status</dt>
                        <dd class="col-sm-7" id="userStatus">-</dd>
                        <dt class="col-sm-5">Postal Address</dt>
                        <dd class="col-sm-7" id="userPostalAddress">-</dd>
                    </dl>
                    <div class="mt-4 d-flex gap-2">
                        <button class="btn btn-glass px-3" data-bs-toggle="modal" data-bs-target="#editUserModal"><i class="bi bi-pencil-square me-1"></i> Edit</button>
                        <button class="btn btn-glass px-3" data-bs-toggle="modal" data-bs-target="#resetPasswordModal"><i class="bi bi-key me-1"></i> Reset Password</button>
                    </div>
                </div>
            </div>
        </div>
        <div class="col-12 col-lg-8">
            <div class="row g-4">
                <div class="col-12 col-md-6">
                    <div class="glass-card h-100">
                        <div class="card-body p-4">
                            <h5 class="fw-bold mb-2"><i class="bi bi-credit-card me-2"></i> Accounts</h5>
                            <div>Total: <span class="fw-semibold" id="accountCount">0</span></div>
                            <div>Active: <span class="fw-semibold" id="activeAccounts">0</span></div>
                            <div class="mt-3">
                                <a href="#accountsTable" class="btn btn-glass btn-sm">View All</a>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="col-12 col-md-6">
                    <div class="glass-card h-100">
                        <div class="card-body p-4">
                            <h5 class="fw-bold mb-2"><i class="bi bi-arrow-left-right me-2"></i> Transactions</h5>
                            <div>Total: <span class="fw-semibold" id="transactionCount">0</span></div>
                            <div>Pending: <span class="fw-semibold" id="pendingTransactions">0</span></div>
                            <div class="mt-3">
                                <a href="#transactionsTable" class="btn btn-glass btn-sm">View All</a>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <div class="row mt-4">
        <div class="col-12">
            <div class="glass-card mb-4 w-100" id="accountsTable">
                <div class="glass-header fw-bold">
                    <i class="bi bi-credit-card me-2"></i> Accounts
                </div>
                <div class="card-body p-0">
                    <div class="table-responsive">
                        <table class="table table-hover align-middle mb-0 w-100 glass-table rounded-3">
                            <thead>
                                <tr>
                                    <th>Type</th>
                                    <th>Number</th>
                                    <th>Balance</th>
                                    <th>Currency</th>
                                    <th>Status</th>
                                    <th>Created</th>
                                </tr>
                            </thead>
                            <tbody id="accountsBody">
                                <!-- Accounts will be loaded here -->
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <div class="row">
        <div class="col-12">
            <div class="glass-card mb-4 w-100" id="transactionsTable">
                <div class="glass-header fw-bold">
                    <i class="bi bi-arrow-left-right me-2"></i> Transactions
                </div>
                <div class="card-body p-0">
                    <div class="table-responsive">
                        <table class="table table-hover align-middle mb-0 w-100 glass-table rounded-3">
                            <thead>
                                <tr>
                                    <th>Date</th>
                                    <th>Amount (ZAR)</th>
                                    <th>Type</th>
                                    <th>Description</th>
                                    <th>Reference</th>
                                    <th>Source</th>
                                    <th>Account Number</th>
                                    <th>Account Type</th>
                                </tr>
                            </thead>
                            <tbody id="transactionsBody">
                                <!-- Transactions will be loaded here -->
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
        </div>
    </div>
        <div class="col-12 col-lg-8">
            <div class="row g-4">
    
        </div>
            </div>
        </div>
    </div>
    <!-- Removed green and blue tables as requested -->
    <!-- Edit User Modal -->
    <div class="modal fade" id="editUserModal" tabindex="-1" aria-labelledby="editUserModalLabel" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header bg-primary text-white">
                    <h5 class="modal-title" id="editUserModalLabel">Edit User Details</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <form id="editUserForm">
                        <div class="mb-3">
                            <label class="form-label">First Name</label>
                            <input type="text" class="form-control" id="editFirstName" />
                        </div>
                        <div class="mb-3">
                            <label class="form-label">Surname</label>
                            <input type="text" class="form-control" id="editSurname" />
                        </div>
                        <div class="mb-3">
                            <label class="form-label">Phone</label>
                            <input type="text" class="form-control" id="editPhone" />
                        </div>
                        <div class="mb-3">
                            <label class="form-label">Postal Address</label>
                            <input type="text" class="form-control" id="editPostalAddress" />
                        </div>
                        <div class="mb-3">
                            <label class="form-label">Home Address</label>
                            <input type="text" class="form-control" id="editHomeAddress" />
                        </div>
                        <button type="submit" class="btn btn-primary">Save Changes</button>
                    </form>
                </div>
            </div>
        </div>
    </div>
    <!-- Reset Password Modal -->
    <div class="modal fade" id="resetPasswordModal" tabindex="-1" aria-labelledby="resetPasswordModalLabel" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header bg-warning text-dark">
                    <h5 class="modal-title" id="resetPasswordModalLabel">Reset Password</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <form id="resetPasswordForm">
                        <div class="mb-3">
                            <label class="form-label">Email</label>
                            <input type="email" class="form-control" id="resetEmail" />
                        </div>
                        <button type="submit" class="btn btn-warning">Request Reset</button>
                    </form>
                </div>
            </div>
        </div>
    </div>
    <div class="text-end mt-4">
        <a asp-page="/Index" class="btn btn-outline-danger px-4 py-2 fw-bold">Close Portal</a>
    </div>
</div>

@section Scripts {
<script>
const API_BASE_URL = 'https://nanacaring-backend.onrender.com';
const token = localStorage.getItem('portal-admin-token');

function fillEditUserModal(profile) {
    document.getElementById('editFirstName').value = profile.firstName || '';
    document.getElementById('editSurname').value = profile.surname || '';
    document.getElementById('editPhone').value = profile.phoneNumber || '';
    document.getElementById('editPostalAddress').value = profile.postalAddressLine1 || '';
    document.getElementById('editHomeAddress').value = profile.homeAddressLine1 || '';
}

if (!token) {
    alert('No portal JWT found. Please log in.');
} else {
    // Fetch user details
    fetch(`${API_BASE_URL}/api/portal/me`, {
        method: 'GET',
        headers: {
            'Authorization': 'Bearer ' + token,
            'Content-Type': 'application/json'
        }
    })
    .then(res => res.json())
    .then(data => {
        if (data) {
            const userFullNameEl = document.getElementById('userFullName');
            if (userFullNameEl) userFullNameEl.textContent = `${data.firstName || ''} ${data.surname || ''}`.trim() || '-';
            const userFirstNameEl = document.getElementById('userFirstName');
            if (userFirstNameEl) userFirstNameEl.textContent = data.firstName || '-';
            const userSurnameEl = document.getElementById('userSurname');
            if (userSurnameEl) userSurnameEl.textContent = data.surname || '-';
            const userEmailEl = document.getElementById('userEmail');
            if (userEmailEl) userEmailEl.textContent = data.email || '-';
            const userPhoneEl = document.getElementById('userPhone');
            if (userPhoneEl) userPhoneEl.textContent = data.phoneNumber || '-';
            const userRoleEl = document.getElementById('userRole');
            if (userRoleEl) userRoleEl.textContent = data.role || '-';
            const userStatusEl = document.getElementById('userStatus');
            if (userStatusEl) userStatusEl.textContent = data.status || '-';
            const userPostalAddressEl = document.getElementById('userPostalAddress');
            if (userPostalAddressEl) userPostalAddressEl.textContent = data.postalAddressLine1 || '-';
            const userHomeAddressEl = document.getElementById('userHomeAddress');
            if (userHomeAddressEl) userHomeAddressEl.textContent = data.homeAddressLine1 || '-';
            fillEditUserModal(data);
            const resetEmailEl = document.getElementById('resetEmail');
            if (resetEmailEl) resetEmailEl.value = data.email || '';
        }
    })
    .catch(err => {
        console.error('Error fetching user details:', err);
        const userFullNameEl = document.getElementById('userFullName');
        if (userFullNameEl) userFullNameEl.textContent = 'Failed to load user details.';
        const userFirstNameEl = document.getElementById('userFirstName');
        if (userFirstNameEl) userFirstNameEl.textContent = '-';
        const userSurnameEl = document.getElementById('userSurname');
        if (userSurnameEl) userSurnameEl.textContent = '-';
        const userEmailEl = document.getElementById('userEmail');
        if (userEmailEl) userEmailEl.textContent = '-';
        const userPhoneEl = document.getElementById('userPhone');
        if (userPhoneEl) userPhoneEl.textContent = '-';
        const userRoleEl = document.getElementById('userRole');
        if (userRoleEl) userRoleEl.textContent = '-';
        const userStatusEl = document.getElementById('userStatus');
        if (userStatusEl) userStatusEl.textContent = '-';
        const userPostalAddressEl = document.getElementById('userPostalAddress');
        if (userPostalAddressEl) userPostalAddressEl.textContent = '-';
        const userHomeAddressEl = document.getElementById('userHomeAddress');
        if (userHomeAddressEl) userHomeAddressEl.textContent = '-';
    });

    // Fetch accounts
    fetch(`${API_BASE_URL}/api/portal/me/accounts`, {
        method: 'GET',
        headers: {
            'Authorization': 'Bearer ' + token,
            'Content-Type': 'application/json'
        }
    })
    .then(res => res.json())
    .then(accountsResp => {
        let accounts = Array.isArray(accountsResp) ? accountsResp : accountsResp && Array.isArray(accountsResp.accounts) ? accountsResp.accounts : [];
        let activeCount = 0;
        const accountCountEl = document.getElementById('accountCount');
        const activeAccountsEl = document.getElementById('activeAccounts');
        const accountsBody = document.getElementById('accountsBody');
        if (!Array.isArray(accounts)) {
            if (accountsBody) accountsBody.innerHTML = `<tr><td colspan="6" class="text-center text-danger">Failed to load accounts. Server error or invalid response.</td></tr>`;
            if (accountCountEl) accountCountEl.textContent = '0';
            if (activeAccountsEl) activeAccountsEl.textContent = '0';
            console.error('Accounts response is not an array:', accountsResp);
            return;
        }
        if (accountCountEl) accountCountEl.textContent = accounts.length;
        if (accountsBody) accountsBody.innerHTML = '';
        if (accounts.length === 0) {
            if (accountsBody) accountsBody.innerHTML = `<tr><td colspan="6" class="text-center text-muted">No accounts found for this user.</td></tr>`;
        } else {
            accounts.forEach(acc => {
                if (typeof acc.status === 'string' && acc.status.trim().toLowerCase() === 'active') activeCount++;
                // Icon for account type
                let typeIcon = acc.accountType === 'Savings' ? '<i class="bi bi-piggy-bank-fill text-primary" title="Savings"></i>' : acc.accountType === 'Current' ? '<i class="bi bi-wallet2 text-success" title="Current"></i>' : '<i class="bi bi-credit-card text-secondary" title="Account"></i>';
                // Badge for status
                let statusBadge = (typeof acc.status === 'string' && acc.status.trim().toLowerCase() === 'active') ? '<span class="badge bg-success">Active</span>' : acc.status === 'Blocked' ? '<span class="badge bg-danger">Blocked</span>' : `<span class="badge bg-secondary">${acc.status || '-'}</span>`;
                if (accountsBody) accountsBody.innerHTML += `<tr style="transition:background 0.2s;" onmouseover="this.style.background='#f0f8ff'" onmouseout="this.style.background=''">
                    <td>${typeIcon} <span class="ms-1" title="${acc.accountType||'-'}">${acc.accountType || '-'}</span></td>
                    <td><span title="${acc.accountNumber}">${acc.accountNumber || '-'}</span></td>
                    <td><span title="${acc.balance}">${acc.balance ? acc.balance.toLocaleString('en-US', {style:'currency',currency:acc.currency||'USD'}) : '-'}</span></td>
                    <td>${acc.currency || '-'}</td>
                    <td>${statusBadge}</td>
                    <td><span title="${acc.createdAt}">${acc.createdAt ? new Date(acc.createdAt).toISOString().slice(0,10) : '-'}</span></td>
                </tr>`;
            });
        }
        if (activeAccountsEl) activeAccountsEl.textContent = activeCount;
    })
    .catch(err => {
        console.error('Error fetching accounts:', err);
        const accountsBody = document.getElementById('accountsBody');
        accountsBody.innerHTML = `<tr><td colspan="6" class="text-center text-danger">Failed to load accounts.</td></tr>`;
    });

    // Fetch transactions
    fetch(`${API_BASE_URL}/api/portal/me/transactions`, {
        method: 'GET',
        headers: {
            'Authorization': 'Bearer ' + token,
            'Content-Type': 'application/json'
        }
    })
    .then(res => res.json())
    .then(transactionsResp => {
        let transactions = Array.isArray(transactionsResp?.transactions) ? transactionsResp.transactions : [];
        const transactionCountEl = document.getElementById('transactionCount');
        const transactionsBody = document.getElementById('transactionsBody');
        if (!Array.isArray(transactions)) {
            if (transactionsBody) transactionsBody.innerHTML = `<tr><td colspan="8" class="text-center text-danger">Failed to load transactions. Server error or invalid response.</td></tr>`;
            if (transactionCountEl) transactionCountEl.textContent = '0';
            console.error('Transactions response is not an array:', transactionsResp);
            return;
        }
        if (transactionCountEl) transactionCountEl.textContent = transactions.length;
        if (transactionsBody) transactionsBody.innerHTML = '';
        if (transactions.length === 0) {
            if (transactionsBody) transactionsBody.innerHTML = `<tr><td colspan="8" class="text-center text-muted">No transactions found for this user.</td></tr>`;
        } else {
            transactions.forEach(txn => {
                const accountNumber = txn.account?.accountNumber || '-';
                const accountType = txn.account?.accountType || '-';
                const amount = txn.amount ? txn.amount.toLocaleString('en-ZA', {style:'currency',currency:'ZAR'}) : '-';
                const type = txn.type || '-';
                const description = txn.description || '-';
                const reference = txn.reference || '-';
                const source = txn.metadata?.source || '-';
                const date = txn.createdAt ? new Date(txn.createdAt).toISOString().slice(0,10) : '-';
                if (transactionsBody) transactionsBody.innerHTML += `<tr style="transition:background 0.2s;" onmouseover="this.style.background='#f8fff0'" onmouseout="this.style.background=''">
                    <td>${date}</td>
                    <td>${amount}</td>
                    <td>${type}</td>
                    <td>${description}</td>
                    <td>${reference}</td>
                    <td>${source}</td>
                    <td>${accountNumber}</td>
                    <td>${accountType}</td>
                </tr>`;
            });
        }
    });

    // Edit User Details
    document.getElementById('editUserForm').onsubmit = function(e) {
        e.preventDefault();
        const firstName = document.getElementById('editFirstName').value;
        const surname = document.getElementById('editSurname').value;
        const phoneNumber = document.getElementById('editPhone').value;
        const postalAddressLine1 = document.getElementById('editPostalAddress').value;
        const homeAddressLine1 = document.getElementById('editHomeAddress').value;
        fetch(`${API_BASE_URL}/api/portal/me`, {
            method: 'PUT',
            headers: {
                'Authorization': 'Bearer ' + token,
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({ firstName, surname, phoneNumber, postalAddressLine1, homeAddressLine1 })
        })
        .then(res => res.json())
        .then(data => {
            if (data && (data.success || data.firstName)) {
                alert('User details updated successfully!');
                location.reload();
            } else {
                alert('Failed to update user: ' + JSON.stringify(data));
            }
        })
        .catch(err => alert('Error: ' + err));
    };

    // Reset Password
    document.getElementById('resetPasswordForm').onsubmit = function(e) {
        e.preventDefault();
        const email = document.getElementById('resetEmail').value;
        fetch(`${API_BASE_URL}/api/portal/request-password-reset`, {
            method: 'POST',
            headers: {
                'Authorization': 'Bearer ' + token,
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({ email })
        })
        .then(res => res.json())
        .then(data => {
            if (data && data.success) {
                alert('Password reset email sent!');
            } else {
                alert('Failed to request password reset: ' + JSON.stringify(data));
            }
        })
        .catch(err => alert('Error: ' + err));
    };
}
</script>
}
