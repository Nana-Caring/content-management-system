@page
@model CMS.Web.Pages.Users.IndexModel
@{
    ViewData["Title"] = "Users Management";
}

@section Scripts {
    <meta name="__RequestVerificationToken" content="@Html.AntiForgeryToken()" />
}

<!-- Hidden form for anti-forgery token -->
<form style="display: none;">
    @Html.AntiForgeryToken()
</form>

<style>
    /* Original table and page styles */
    .professional-table {
        font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, 'Helvetica Neue', Arial, sans-serif;
        font-size: 0.75rem;
        line-height: 1.4;
    }
    
    .professional-table th {
        font-size: 0.7rem;
        font-weight: 600;
        text-transform: uppercase;
        letter-spacing: 0.6px;
        padding: 0.8rem 0.6rem;
        border-bottom: 2px solid #dee2e6;
        background: linear-gradient(135deg, #343a40 0%, #495057 100%);
        color: white;
    }
    
    .professional-table td {
        font-size: 0.75rem;
        padding: 0.6rem 0.5rem;
        vertical-align: middle;
        border-bottom: 1px solid #f1f3f4;
        color: #2c3e50;
        line-height: 1.3;
    }
    
    .professional-table tbody tr {
        transition: all 0.2s ease;
    }
    
    .professional-table tbody tr:hover {
        background-color: rgba(102, 126, 234, 0.05);
        transform: translateY(-1px);
        box-shadow: 0 2px 8px rgba(0,0,0,0.1);
    }
    
    .user-card {
        border: none;
        box-shadow: 0 2px 12px rgba(0,0,0,0.08);
        border-radius: 12px;
        transition: all 0.3s ease;
    }
    
    .user-card:hover {
        box-shadow: 0 4px 20px rgba(0,0,0,0.12);
    }
    
    .filter-card {
        border: none;
        box-shadow: 0 1px 8px rgba(0,0,0,0.06);
        border-radius: 10px;
        background: linear-gradient(135deg, #f8f9fa 0%, #ffffff 100%);
    }
    
    .stats-badge {
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        border: none;
        padding: 0.5rem 1rem;
        font-size: 0.875rem;
        font-weight: 500;
    }
    
    .modern-btn {
        border-radius: 8px;
        padding: 0.5rem 1.25rem;
        font-weight: 500;
        transition: all 0.2s ease;
        border: none;
    }
    
    .modern-btn:hover {
        transform: translateY(-1px);
        box-shadow: 0 4px 8px rgba(0,0,0,0.15);
    }
    
    .role-badge {
        font-size: 0.75rem;
        padding: 0.4rem 0.8rem;
        border-radius: 8px;
        font-weight: 600;
        text-transform: uppercase;
        letter-spacing: 0.5px;
        font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
    }
    
    .id-badge {
        background: linear-gradient(135deg, #e3f2fd 0%, #f3e5f5 100%);
        color: #5e35b1;
        font-weight: 700;
        font-size: 0.75rem;
        padding: 0.35rem 0.7rem;
        border-radius: 10px;
        font-family: 'Courier New', Consolas, monospace;
        letter-spacing: 0.5px;
    }
    
    .sort-link {
        color: #ffffff !important;
        text-decoration: none !important;
        transition: all 0.2s ease;
        display: flex;
        align-items: center;
        gap: 0.5rem;
        font-family: inherit;
        font-weight: 600;
        font-size: 0.8rem;
    }
    
    .sort-link:hover {
        color: #e3f2fd !important;
        transform: translateY(-1px);
    }
    
    .sort-icon {
        font-size: 0.7rem;
        opacity: 0.8;
    }
    
    .page-header {
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        color: white;
        padding: 2rem;
        border-radius: 15px;
        margin-bottom: 2rem;
        box-shadow: 0 4px 20px rgba(102, 126, 234, 0.3);
    }
    
    .empty-state {
        padding: 3rem 2rem;
        text-align: center;
        color: #6c757d;
    }
    
    .empty-state i {
        color: #dee2e6;
        margin-bottom: 1rem;
    }
    
    /* Action Button Styles */
    .btn-group {
        display: flex;
        gap: 3px;
        justify-content: center;
    }
    
    .btn-group .btn {
        padding: 0.35rem 0.7rem;
        margin: 0;
        font-size: 0.75rem;
        border-radius: 6px;
        min-width: 32px;
        height: 32px;
        display: flex;
        align-items: center;
        justify-content: center;
        white-space: nowrap;
        border-width: 1.5px;
    }
    
    .btn-group .btn i {
        font-size: 0.8rem;
    }
    
    .modern-btn {
        transition: all 0.2s ease;
        font-weight: 500;
    }
    
    .modern-btn:hover {
        transform: translateY(-1px);
        box-shadow: 0 3px 8px rgba(0,0,0,0.15);
    }
    
    .btn-outline-primary:hover {
        background-color: #0d6efd;
        border-color: #0d6efd;
        color: white;
    }
    
    .btn-outline-warning:hover {
        background-color: #ffc107;
        border-color: #ffc107;
        color: #000;
    }
    
    .btn-outline-danger:hover {
        background-color: #dc3545;
        border-color: #dc3545;
        color: white;
    }
    
    /* Actions column minimum width */
    .actions-column {
        min-width: 160px;
        width: 160px;
    }
    
    /* Scrollable Table Styles */
    .scrollable-table-container {
        max-height: 70vh;
        overflow-y: auto;
        overflow-x: auto;
        border: 1px solid #dee2e6;
        border-radius: 12px;
        box-shadow: 0 2px 12px rgba(0,0,0,0.08);
        background: white;
        position: relative;
    }
    
    .scrollable-table-container::-webkit-scrollbar {
        width: 8px;
        height: 8px;
    }
    
    .scrollable-table-container::-webkit-scrollbar-track {
        background: #f1f1f1;
        border-radius: 4px;
    }
    
    .scrollable-table-container::-webkit-scrollbar-thumb {
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        border-radius: 4px;
    }
    
    .scrollable-table-container::-webkit-scrollbar-thumb:hover {
        background: linear-gradient(135deg, #5a6fd8 0%, #6a4190 100%);
    }
    
    /* Firefox scrollbar */
    .scrollable-table-container {
        scrollbar-width: thin;
        scrollbar-color: #667eea #f1f1f1;
    }
    
    /* Sticky header for scrollable table */
    .scrollable-table-container .professional-table thead th {
        position: sticky;
        top: 0;
        z-index: 10;
        background: linear-gradient(135deg, #343a40 0%, #495057 100%);
        box-shadow: 0 2px 4px rgba(0,0,0,0.1);
    }
    
    /* Smooth scrolling */
    .scrollable-table-container {
        scroll-behavior: smooth;
    }
    
    /* Row hover effect with scroll */
    .scrollable-table-container .professional-table tbody tr:hover {
        background-color: rgba(102, 126, 234, 0.08);
        transform: translateY(-1px);
        box-shadow: 0 4px 12px rgba(0,0,0,0.15);
        transition: all 0.3s ease;
    }
    
    /* Table info overlay */
    .table-info-overlay {
        position: absolute;
        top: 10px;
        right: 10px;
        background: rgba(255, 255, 255, 0.95);
        backdrop-filter: blur(8px);
        padding: 0.5rem 1rem;
        border-radius: 20px;
        font-size: 0.8rem;
        color: #6c757d;
        border: 1px solid rgba(255, 255, 255, 0.2);
        box-shadow: 0 2px 8px rgba(0,0,0,0.1);
        z-index: 5;
    }
    
    /* Scroll to top button */
    .scroll-to-top {
        position: fixed;
        bottom: 20px;
        right: 20px;
        width: 50px;
        height: 50px;
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        color: white;
        border: none;
        border-radius: 50%;
        box-shadow: 0 4px 12px rgba(102, 126, 234, 0.3);
        cursor: pointer;
        opacity: 0;
        visibility: hidden;
        transition: all 0.3s ease;
        z-index: 1000;
        display: flex;
        align-items: center;
        justify-content: center;
    }
    
    .scroll-to-top.visible {
        opacity: 1;
        visibility: visible;
    }
    
    .scroll-to-top:hover {
        transform: translateY(-2px);
        box-shadow: 0 6px 16px rgba(102, 126, 234, 0.4);
    }
    
    /* Smaller font sizes for various elements */
    .fw-bold {
        font-size: 0.75rem !important;
    }
    
    .text-muted {
        font-size: 0.65rem !important;
    }
    
    .badge {
        font-size: 0.65rem !important;
        padding: 0.25rem 0.5rem !important;
    }
    
    .id-badge {
        font-size: 0.7rem !important;
    }
    
    /* Responsive styles for action buttons */
    @@media (max-width: 768px) {
        .btn-group {
            gap: 1px;
        }
        
        .btn-group .btn {
            padding: 0.25rem 0.4rem;
            min-width: 28px;
            height: 28px;
            font-size: 0.7rem;
        }
        
        .btn-group .btn i {
            font-size: 0.7rem;
        }
        
        .actions-column {
            min-width: 120px;
            width: 120px;
        }
    }
    
    /* Ensure buttons are always visible */
    .btn-group .btn {
        opacity: 1 !important;
        visibility: visible !important;
    }
    
    /* Add hover effects for better UX */
    tbody tr:hover .btn-group .btn {
        opacity: 1;
        transform: scale(1.05);
    }
</style>

<div class="page-header">
    <div class="d-flex justify-content-between align-items-center">
        <div>
            <h1 class="h3 mb-2 fw-bold">Users Management</h1>
            <p class="mb-0 opacity-75">Manage and monitor all user accounts in the system</p>
        </div>
        <div class="d-flex gap-3 align-items-center">
            <span class="stats-badge badge">
                Total: @Model.TotalUsers Users
                @if (!string.IsNullOrEmpty(Model.SearchTerm) || !string.IsNullOrEmpty(Model.RoleFilter) || !string.IsNullOrEmpty(Model.RelationFilter) || Model.CreatedFromDate.HasValue || Model.CreatedToDate.HasValue)
                {
                    <span class="text-light opacity-75">| Filtered</span>
                }
            </span>
            <button class="btn btn-light modern-btn" type="button" data-bs-toggle="collapse" data-bs-target="#filterPanel">
                <i class="fas fa-sliders-h me-2"></i>Advanced Filters
            </button>
        </div>
    </div>
</div>

@if (!string.IsNullOrEmpty(Model.ErrorMessage))
{
    <div class="alert alert-danger alert-dismissible fade show" role="alert">
        @Model.ErrorMessage
        <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
    </div>
}

@if (TempData["SuccessMessage"] != null)
{
    <div class="alert alert-success alert-dismissible fade show" role="alert">
        @TempData["SuccessMessage"]
        <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
    </div>
}

@if (TempData["ErrorMessage"] != null)
{
    <div class="alert alert-danger alert-dismissible fade show" role="alert">
        @TempData["ErrorMessage"]
        <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
    </div>
}

<!-- Filter Panel -->
<div class="collapse @((!string.IsNullOrEmpty(Model.SearchTerm) || !string.IsNullOrEmpty(Model.RoleFilter) || !string.IsNullOrEmpty(Model.RelationFilter) || Model.CreatedFromDate.HasValue || Model.CreatedToDate.HasValue) ? "show" : "")" id="filterPanel">
    <div class="filter-card card mb-4">
        <div class="card-header bg-transparent border-0 pb-0">
            <div class="d-flex align-items-center">
                <div class="bg-primary rounded-circle p-2 me-3" style="width: 40px; height: 40px; display: flex; align-items: center; justify-content: center;">
                    <i class="fas fa-sliders-h text-white" style="font-size: 0.875rem;"></i>
                </div>
                <div>
                    <h6 class="mb-0 fw-bold">Advanced Filters</h6>
                    <small class="text-muted">Refine your search with multiple criteria</small>
                </div>
            </div>
        </div>
        <div class="card-body pt-3">
            <form method="get">
                <div class="row g-3">
                    <!-- Search -->
                    <div class="col-md-4">
                        <label for="search" class="form-label fw-semibold">
                            <i class="fas fa-search me-1 text-primary"></i>Search
                        </label>
                        <input type="text" class="form-control border-0 bg-light" 
                               id="search" name="search" value="@Model.SearchTerm" 
                               placeholder="Name, email, ID number...">
                    </div>
                    
                    <!-- Role Filter -->
                    <div class="col-md-2">
                        <label for="roleFilter" class="form-label fw-semibold">
                            <i class="fas fa-user-tag me-1 text-success"></i>Role
                        </label>
                        <select class="form-select border-0 bg-light" id="roleFilter" name="roleFilter">
                            <option value="">All Roles</option>
                            @foreach (var role in Model.AvailableRoles)
                            {
                                <option value="@role" selected="@(Model.RoleFilter == role)">@role</option>
                            }
                        </select>
                    </div>
                    
                    <!-- Relation Filter -->
                    <div class="col-md-2">
                        <label for="relationFilter" class="form-label fw-semibold">
                            <i class="fas fa-link me-1 text-info"></i>Relation
                        </label>
                        <select class="form-select border-0 bg-light" id="relationFilter" name="relationFilter">
                            <option value="">All Relations</option>
                            @foreach (var relation in Model.AvailableRelations)
                            {
                                <option value="@relation" selected="@(Model.RelationFilter == relation)">@relation</option>
                            }
                        </select>
                    </div>
                    
                    <!-- Date Range -->
                    <div class="col-md-2">
                        <label for="createdFrom" class="form-label fw-semibold">
                            <i class="fas fa-calendar-alt me-1 text-warning"></i>From Date
                        </label>
                        <input type="date" class="form-control border-0 bg-light" 
                               id="createdFrom" name="createdFrom" 
                               value="@(Model.CreatedFromDate?.ToString("yyyy-MM-dd"))">
                    </div>
                    
                    <div class="col-md-2">
                        <label for="createdTo" class="form-label fw-semibold">
                            <i class="fas fa-calendar-check me-1 text-warning"></i>To Date
                        </label>
                        <input type="date" class="form-control border-0 bg-light" 
                               id="createdTo" name="createdTo" 
                               value="@(Model.CreatedToDate?.ToString("yyyy-MM-dd"))">
                    </div>
                </div>
                
                <!-- Hidden sort parameters -->
                <input type="hidden" name="sortBy" value="@Model.SortBy">
                <input type="hidden" name="sortDirection" value="@Model.SortDirection">
                
                <!-- Filter Actions -->
                <div class="mt-4 pt-3 border-top">
                    <div class="d-flex gap-3">
                        <button type="submit" class="btn btn-primary modern-btn">
                            <i class="fas fa-search me-2"></i>Apply Filters
                        </button>
                        <a href="?" class="btn btn-outline-secondary modern-btn">
                            <i class="fas fa-times me-2"></i>Clear All
                        </a>
                        @if (!string.IsNullOrEmpty(Model.SearchTerm) || !string.IsNullOrEmpty(Model.RoleFilter) || !string.IsNullOrEmpty(Model.RelationFilter) || Model.CreatedFromDate.HasValue || Model.CreatedToDate.HasValue)
                        {
                            <span class="badge bg-success align-self-center">
                                <i class="fas fa-filter me-1"></i>Filters Active
                            </span>
                        }
                    </div>
                </div>
            </form>
        </div>
    </div>
</div>

<div class="user-card card">
    <div class="card-body p-0">
        <!-- Table Info Overlay -->
        <div class="table-info-overlay">
            <i class="fas fa-users me-1"></i>
            @Model.TotalUsers users total
            @if (!string.IsNullOrEmpty(Model.SearchTerm) || !string.IsNullOrEmpty(Model.RoleFilter) || !string.IsNullOrEmpty(Model.RelationFilter) || Model.CreatedFromDate.HasValue || Model.CreatedToDate.HasValue)
            {
                <span class="text-primary">| Filtered</span>
            }
        </div>
        
        <!-- Scrollable Table Container -->
        <div class="scrollable-table-container" id="users-table-container">
            <table class="professional-table table table-hover align-middle mb-0">
                <thead class="table-dark">
                    <tr>
                        <th class="border-0">
                            <a href="@Model.GetSortUrl("Id")" class="sort-link">
                                <span>ID</span>
                                <i class="@Model.GetSortIcon("Id") sort-icon"></i>
                            </a>
                        </th>
                        <th class="border-0">
                            <a href="@Model.GetSortUrl("FullName")" class="sort-link">
                                <span>Full Name</span>
                                <i class="@Model.GetSortIcon("FullName") sort-icon"></i>
                            </a>
                        </th>
                        <th class="border-0">
                            <a href="@Model.GetSortUrl("Role")" class="sort-link">
                                <span>Role</span>
                                <i class="@Model.GetSortIcon("Role") sort-icon"></i>
                            </a>
                        </th>
                        <th class="border-0">
                            <a href="@Model.GetSortUrl("IdNumber")" class="sort-link">
                                <span>ID Number</span>
                                <i class="@Model.GetSortIcon("IdNumber") sort-icon"></i>
                            </a>
                        </th>
                        <th class="border-0">
                            <a href="@Model.GetSortUrl("Relation")" class="sort-link">
                                <span>Relation</span>
                                <i class="@Model.GetSortIcon("Relation") sort-icon"></i>
                            </a>
                        </th>
                        <th class="border-0">
                            <a href="@Model.GetSortUrl("PhoneNumber")" class="sort-link">
                                <span>Phone</span>
                                <i class="@Model.GetSortIcon("PhoneNumber") sort-icon"></i>
                            </a>
                        </th>
                        <th class="border-0">
                            <a href="@Model.GetSortUrl("CreatedAt")" class="sort-link">
                                <span>Created</span>
                                <i class="@Model.GetSortIcon("CreatedAt") sort-icon"></i>
                            </a>
                        </th>
                        <th class="border-0">
                            <a href="@Model.GetSortUrl("UpdatedAt")" class="sort-link">
                                <span>Updated</span>
                                <i class="@Model.GetSortIcon("UpdatedAt") sort-icon"></i>
                            </a>
                        </th>
                        <th class="border-0 text-center">Status</th>
                        <!-- Actions column header removed -->
                    </tr>
                </thead>
                <tbody>
                @if (Model.Users != null && Model.Users.Any())
                {
                    foreach (var user in Model.Users)
                    {
                        <tr data-user-id="@user.Id">
                            <td>
                                <span class="id-badge">
                                    #@user.Id
                                </span>
                            </td>
                            <td>
                                <div class="d-flex align-items-center">
                                    <div class="bg-primary rounded-circle me-3 d-flex align-items-center justify-content-center" 
                                         style="width: 40px; height: 40px; font-size: 0.9rem; color: white; font-weight: 600;">
                                        @(user.FirstName.FirstOrDefault())@(user.Surname.FirstOrDefault())
                                    </div>
                                    <div>
                                        <div class="fw-bold text-dark" style="font-size: 0.95rem;">@user.FullName</div>
                                        @if (!string.IsNullOrEmpty(user.FirstName) && !string.IsNullOrEmpty(user.Surname))
                                        {
                                            <small class="text-muted" style="font-size: 0.8rem;">@user.FirstName @(!string.IsNullOrEmpty(user.MiddleName) ? user.MiddleName + " " : "")@user.Surname</small>
                                        }
                                    </div>
                                </div>
                            </td>
                            <td>
                                <span class="role-badge badge @(user.Role.ToLower() switch {
                                    "admin" => "bg-gradient bg-danger",
                                    "user" => "bg-gradient bg-primary", 
                                    "dependent" => "bg-gradient bg-info",
                                    _ => "bg-gradient bg-secondary"
                                })">
                                    @user.Role
                                </span>
                            </td>
                            <td>
                                @if (!string.IsNullOrEmpty(user.IdNumber))
                                {
                                    <code class="bg-light px-2 py-1 rounded" style="font-size: 0.85rem; font-family: 'Courier New', Consolas, monospace;">@user.IdNumber</code>
                                }
                                else
                                {
                                    <span class="text-muted" style="font-size: 0.85rem;">—</span>
                                }
                            </td>
                            <td>
                                @if (!string.IsNullOrEmpty(user.Relation))
                                {
                                    <span class="badge bg-light text-dark border" style="font-size: 0.75rem; font-weight: 500;">@user.Relation</span>
                                }
                                else
                                {
                                    <span class="text-muted" style="font-size: 0.85rem;">—</span>
                                }
                            </td>
                            <td>
                                @if (!string.IsNullOrEmpty(user.PhoneNumber))
                                {
                                    <div class="text-dark fw-medium" style="font-size: 0.9rem;">
                                        <i class="fas fa-phone me-1 text-muted" style="font-size: 0.8rem;"></i>
                                        <a href="tel:@user.PhoneNumber" class="text-decoration-none">@user.PhoneNumber</a>
                                    </div>
                                }
                                else
                                {
                                    <span class="text-muted" style="font-size: 0.85rem;">—</span>
                                }
                            </td>
                            <td>
                                <div class="text-dark fw-medium" style="font-size: 0.85rem;">@user.CreatedAt.ToString("MMM dd, yyyy")</div>
                                <small class="text-muted" style="font-size: 0.75rem;">@user.CreatedAt.ToString("HH:mm")</small>
                            </td>
                            <td>
                                <div class="text-dark fw-medium" style="font-size: 0.85rem;">@user.UpdatedAt.ToString("MMM dd, yyyy")</div>
                                <small class="text-muted" style="font-size: 0.75rem;">@user.UpdatedAt.ToString("HH:mm")</small>
                            </td>
                            <td class="text-center">
                                @if (user.IsBlocked)
                                {
                                    <span class="badge bg-danger">
                                        <i class="fas fa-ban me-1"></i>Blocked
                                    </span>
                                    @if (!string.IsNullOrEmpty(user.BlockReason))
                                    {
                                        <div>
                                            <small class="text-muted" style="font-size: 0.7rem;" title="@user.BlockReason">
                                                @(user.BlockReason.Length > 20 ? user.BlockReason.Substring(0, 20) + "..." : user.BlockReason)
                                            </small>
                                        </div>
                                    }
                                }
                                else if (!string.IsNullOrEmpty(user.Status) && user.Status.ToLower() == "suspended")
                                {
                                    <span class="badge bg-warning">
                                        <i class="fas fa-pause me-1"></i>Suspended
                                    </span>
                                    @if (!string.IsNullOrEmpty(user.BlockReason))
                                    {
                                        <div>
                                            <small class="text-muted" style="font-size: 0.7rem;" title="@user.BlockReason">
                                                @(user.BlockReason.Length > 20 ? user.BlockReason.Substring(0, 20) + "..." : user.BlockReason)
                                            </small>
                                        </div>
                                    }
                                }
                                else
                                {
                                    <span class="badge bg-success">
                                        <i class="fas fa-check-circle me-1"></i>Active
                                    </span>
                                }
                            </td>
                            <!-- Actions column removed; actions will appear in popup/modal -->
                        </tr>
                    }
                }
                else
                {
                    <tr>
                        <td colspan="9" class="border-0">
                            <div class="empty-state">
                                <i class="fas fa-users fa-4x"></i>
                                @if (!string.IsNullOrEmpty(Model.SearchTerm) || !string.IsNullOrEmpty(Model.RoleFilter) || !string.IsNullOrEmpty(Model.RelationFilter) || Model.CreatedFromDate.HasValue || Model.CreatedToDate.HasValue)
                                {
                                    <h5 class="mt-3 mb-2">No users found</h5>
                                    <p class="mb-3">No users match your current filter criteria.</p>
                                    <a href="?" class="btn btn-outline-primary modern-btn">
                                        <i class="fas fa-times me-2"></i>Clear Filters
                                    </a>
                                }
                                else
                                {
                                    <h5 class="mt-3 mb-2">No users available</h5>
                                    <p class="mb-0">There are currently no users in the system.</p>
                                }
                            </div>
                        </td>
                    </tr>
                }
                </tbody>
            </table>
        </div>
    </div>
</div>

<!-- Scroll to Top Button -->
<button class="scroll-to-top" id="scrollToTop" onclick="scrollToTop()" title="Scroll to top">
    <i class="fas fa-arrow-up"></i>
</button>

<!-- Block Confirmation Modal -->
<div class="modal fade" id="blockModal" tabindex="-1">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content border-0 shadow-lg">
            <div class="modal-header bg-warning text-dark border-0">
                <div class="d-flex align-items-center">
                    <div class="bg-dark bg-opacity-20 rounded-circle p-2 me-3">
                        <i class="fas fa-ban text-dark"></i>
                    </div>
                    <div>
                        <h5 class="modal-title mb-0 fw-bold">Block User</h5>
                        <small class="opacity-75">Restrict user access</small>
                    </div>
                </div>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body p-4">
                <div class="text-center mb-3">
                    <div class="bg-warning bg-opacity-10 rounded-circle mx-auto mb-3" style="width: 60px; height: 60px; display: flex; align-items: center; justify-content: center;">
                        <i class="fas fa-user-lock text-warning fa-2x"></i>
                    </div>
                    <h6 class="fw-bold mb-2">Block User Account</h6>
                    <p class="text-muted mb-3">
                        Are you sure you want to block <strong id="blockUserName" class="text-dark"></strong>?
                    </p>
                </div>
                <div class="mb-3">
                    <label for="blockReason" class="form-label fw-medium">Reason for blocking:</label>
                    <textarea class="form-control" id="blockReason" rows="3" placeholder="Enter the reason for blocking this user..."></textarea>
                </div>
                <div class="alert alert-info border-0 bg-info bg-opacity-10" role="alert">
                    <div class="d-flex align-items-center">
                        <i class="fas fa-info-circle text-info me-2"></i>
                        <small class="mb-0">
                            The user will be immediately unable to access the system. You can unblock them later if needed.
                        </small>
                    </div>
                </div>
            </div>
            <div class="modal-footer border-0 bg-light">
                <button type="button" class="btn btn-outline-secondary modern-btn" data-bs-dismiss="modal">
                    <i class="fas fa-times me-2"></i>Cancel
                </button>
                <button type="button" class="btn btn-warning modern-btn" onclick="confirmBlock()">
                    <i class="fas fa-ban me-2"></i>Block User
                </button>
            </div>
        </div>
    </div>
</div>

<!-- Unblock Confirmation Modal -->
<div class="modal fade" id="unblockModal" tabindex="-1">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content border-0 shadow-lg">
            <div class="modal-header bg-success text-white border-0">
                <div class="d-flex align-items-center">
                    <div class="bg-white bg-opacity-20 rounded-circle p-2 me-3">
                        <i class="fas fa-unlock text-white"></i>
                    </div>
                    <div>
                        <h5 class="modal-title mb-0 fw-bold">Unblock User</h5>
                        <small class="opacity-75">Restore user access</small>
                    </div>
                </div>
                <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body p-4">
                <div class="text-center mb-3">
                    <div class="bg-success bg-opacity-10 rounded-circle mx-auto mb-3" style="width: 60px; height: 60px; display: flex; align-items: center; justify-content: center;">
                        <i class="fas fa-user-check text-success fa-2x"></i>
                    </div>
                    <h6 class="fw-bold mb-2">Unblock User Account</h6>
                    <p class="text-muted mb-0">
                        Are you sure you want to unblock <strong id="unblockUserName" class="text-dark"></strong>?
                    </p>
                </div>
                <div class="alert alert-success border-0 bg-success bg-opacity-10" role="alert">
                    <div class="d-flex align-items-center">
                        <i class="fas fa-check-circle text-success me-2"></i>
                        <small class="mb-0">
                            The user will regain full access to the system immediately.
                        </small>
                    </div>
                </div>
            </div>
            <div class="modal-footer border-0 bg-light">
                <button type="button" class="btn btn-outline-secondary modern-btn" data-bs-dismiss="modal">
                    <i class="fas fa-times me-2"></i>Cancel
                </button>
                <button type="button" class="btn btn-success modern-btn" onclick="confirmUnblock()">
                    <i class="fas fa-unlock me-2"></i>Unblock User
                </button>
            </div>
        </div>
    </div>
</div>

<!-- Suspend Confirmation Modal -->
<div class="modal fade" id="suspendModal" tabindex="-1">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content border-0 shadow-lg">
            <div class="modal-header bg-warning text-dark border-0">
                <div class="d-flex align-items-center">
                    <div class="bg-dark bg-opacity-20 rounded-circle p-2 me-3">
                        <i class="fas fa-pause text-dark"></i>
                    </div>
                    <div>
                        <h5 class="modal-title mb-0 fw-bold">Suspend User</h5>
                        <small class="opacity-75">Temporarily restrict access</small>
                    </div>
                </div>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body p-4">
                <div class="text-center mb-3">
                    <div class="bg-warning bg-opacity-10 rounded-circle mx-auto mb-3" style="width: 60px; height: 60px; display: flex; align-items: center; justify-content: center;">
                        <i class="fas fa-user-clock text-warning fa-2x"></i>
                    </div>
                    <h6 class="fw-bold mb-2">Suspend User Account</h6>
                    <p class="text-muted mb-3">
                        Are you sure you want to suspend <strong id="suspendUserName" class="text-dark"></strong>?
                    </p>
                </div>
                <div class="mb-3">
                    <label for="suspendReason" class="form-label fw-medium">Reason for suspension:</label>
                    <textarea class="form-control" id="suspendReason" rows="3" placeholder="Enter the reason for suspending this user..."></textarea>
                </div>
                <div class="alert alert-warning border-0 bg-warning bg-opacity-10" role="alert">
                    <div class="d-flex align-items-center">
                        <i class="fas fa-exclamation-triangle text-warning me-2"></i>
                        <small class="mb-0">
                            The user will be temporarily unable to access the system. This is a reversible action.
                        </small>
                    </div>
                </div>
            </div>
            <div class="modal-footer border-0 bg-light">
                <button type="button" class="btn btn-outline-secondary modern-btn" data-bs-dismiss="modal">
                    <i class="fas fa-times me-2"></i>Cancel
                </button>
                <button type="button" class="btn btn-warning modern-btn" onclick="confirmSuspend()">
                    <i class="fas fa-pause me-2"></i>Suspend User
                </button>
            </div>
        </div>
    </div>
</div>

<script>
let currentUserId = null;
let currentUserName = null;

// Helper function to get anti-forgery token
function getAntiForgeryToken() {
    // Try to get from meta tag first (if available), then from any existing form
    const metaToken = document.querySelector('meta[name="__RequestVerificationToken"]')?.getAttribute('content');
    const formToken = document.querySelector('input[name="__RequestVerificationToken"]')?.value;
    return metaToken || formToken || '';
}

// Block user function
function blockUser(userId, userName) {
    currentUserId = userId;
    currentUserName = userName;
    document.getElementById('blockUserName').textContent = userName;
    document.getElementById('blockReason').value = '';
    
    const blockModal = new bootstrap.Modal(document.getElementById('blockModal'));
    blockModal.show();
}

// Unblock user function
function unblockUser(userId, userName) {
    currentUserId = userId;
    currentUserName = userName;
    document.getElementById('unblockUserName').textContent = userName;
    
    const unblockModal = new bootstrap.Modal(document.getElementById('unblockModal'));
    unblockModal.show();
}

// Suspend user function
function suspendUser(userId, userName) {
    currentUserId = userId;
    currentUserName = userName;
    document.getElementById('suspendUserName').textContent = userName;
    document.getElementById('suspendReason').value = '';
    
    const suspendModal = new bootstrap.Modal(document.getElementById('suspendModal'));
    suspendModal.show();
}

// Confirm block action
async function confirmBlock() {
    const reason = document.getElementById('blockReason').value.trim();
    
    if (!reason) {
        alert('Please provide a reason for blocking this user.');
        return;
    }
    
    return await blockUserWithLoader(currentUserId, reason);
}

// Confirm unblock action
async function confirmUnblock() {
    return await unblockUserWithLoader(currentUserId);
}

// Confirm suspend action
async function confirmSuspend() {
    const reason = document.getElementById('suspendReason').value.trim();
    
    if (!reason) {
        alert('Please provide a reason for suspending this user.');
        return;
    }
    
    return await suspendUserWithLoader(currentUserId, reason);
}

// Professional Loader integration
const ProfessionalLoader = {
    show(message = 'Loading...', delay = 0, idPrefix = '') {
        const loaderId = `${idPrefix}-loader`;
        const loaderElement = document.createElement('div');
        loaderElement.id = loaderId;
        loaderElement.className = 'professional-loader';
        loaderElement.innerHTML = `
            <div class="spinner-border text-primary" role="status">
                <span class="visually-hidden">Loading...</span>
            </div>
            <div class="loader-message">${message}</div>
        `;
        
        document.body.appendChild(loaderElement);
        
        // Optional: Add a backdrop
        const backdrop = document.createElement('div');
        backdrop.className = 'loader-backdrop';
        document.body.appendChild(backdrop);
        
        // Hide loader after delay
        const timer = setTimeout(() => {
            this.hide(loaderId, backdrop);
        }, delay);
        
        return {
            loaderId,
            cancel: () => clearTimeout(timer),
            hide: () => {
                clearTimeout(timer);
                this.hide(loaderId, backdrop);
            }
        };
    },
    showWithDelay(message = 'Loading...', delay = 500, idPrefix = '') {
        return this.show(message, delay, idPrefix);
    },
    hide(loaderId, backdrop) {
        const loaderElement = document.getElementById(loaderId);
        if (loaderElement) {
            loaderElement.remove();
        }
        if (backdrop) {
            backdrop.remove();
        }
    }
};

// Enhanced user action functions with loader integration
async function blockUserWithLoader(userId, reason) {
    const loaderController = ProfessionalLoader.showWithDelay('Blocking user...', 100, 'users');
    
    try {
        const response = await fetch(`/Users?handler=BlockUser&userId=${userId}`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'RequestVerificationToken': getAntiForgeryToken()
            },
            body: JSON.stringify({ reason: reason })
        });
        
        if (response.ok) {
            let result;
            const contentType = response.headers.get('content-type');
            if (contentType && contentType.includes('application/json')) {
                result = await response.json();
            } else {
                result = { message: 'User blocked successfully' };
            }
            
            // Close modal
            const blockModal = bootstrap.Modal.getInstance(document.getElementById('blockModal'));
            blockModal.hide();
            
            // Show success message
            showNotification(result.message || 'User blocked successfully', 'success');
            
            // Update loader message
            document.getElementById('loader-message').textContent = 'Refreshing data...';
            
            // Refresh the page to show updated status
            setTimeout(() => {
                window.location.reload();
            }, 1500);
        } else {
            loaderController.hide();
            let errorMessage = 'Failed to block user';
            try {
                const contentType = response.headers.get('content-type');
                if (contentType && contentType.includes('application/json')) {
                    const error = await response.json();
                    errorMessage = error.message || errorMessage;
                } else {
                    const errorText = await response.text();
                    if (errorText) {
                        errorMessage = errorText;
                    }
                }
            } catch (parseError) {
                console.error('Error parsing response:', parseError);
                errorMessage = `Server error: ${response.status} ${response.statusText}`;
            }
            showNotification(errorMessage, 'error');
        }
    } catch (error) {
        loaderController.hide();
        console.error('Error blocking user:', error);
        showNotification('An error occurred while blocking the user', 'error');
    }
}

async function unblockUserWithLoader(userId) {
    const loaderController = ProfessionalLoader.showWithDelay('Unblocking user...', 100, 'users');
    
    try {
        const response = await fetch(`/Users?handler=UnblockUser&userId=${userId}`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'RequestVerificationToken': getAntiForgeryToken()
            }
        });
        
        if (response.ok) {
            let result;
            const contentType = response.headers.get('content-type');
            if (contentType && contentType.includes('application/json')) {
                result = await response.json();
            } else {
                result = { message: 'User unblocked successfully' };
            }
            
            // Close modal
            const unblockModal = bootstrap.Modal.getInstance(document.getElementById('unblockModal'));
            unblockModal.hide();
            
            showNotification(result.message || 'User unblocked successfully', 'success');
            
            // Update loader message
            document.getElementById('loader-message').textContent = 'Refreshing data...';
            
            // Refresh the page to show updated status
            setTimeout(() => {
                window.location.reload();
            }, 1500);
        } else {
            loaderController.hide();
            let errorMessage = 'Failed to unblock user';
            try {
                const contentType = response.headers.get('content-type');
                if (contentType && contentType.includes('application/json')) {
                    const error = await response.json();
                    errorMessage = error.message || errorMessage;
                } else {
                    const errorText = await response.text();
                    if (errorText) {
                        errorMessage = errorText;
                    }
                }
            } catch (parseError) {
                console.error('Error parsing response:', parseError);
                errorMessage = `Server error: ${response.status} ${response.statusText}`;
            }
            showNotification(errorMessage, 'error');
        }
    } catch (error) {
        loaderController.hide();
        console.error('Error unblocking user:', error);
        showNotification('An error occurred while unblocking the user', 'error');
    }
}

async function suspendUserWithLoader(userId, reason) {
    const loaderController = ProfessionalLoader.showWithDelay('Suspending user...', 100, 'users');
    
    try {
        const response = await fetch(`/Users?handler=SuspendUser&userId=${userId}`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'RequestVerificationToken': getAntiForgeryToken()
            },
            body: JSON.stringify({ reason: reason })
        });
        
        if (response.ok) {
            let result;
            const contentType = response.headers.get('content-type');
            if (contentType && contentType.includes('application/json')) {
                result = await response.json();
            } else {
                result = { message: 'User suspended successfully' };
            }
            
            // Close modal
            const suspendModal = bootstrap.Modal.getInstance(document.getElementById('suspendModal'));
            suspendModal.hide();
            
            // Show success message
            showNotification(result.message || 'User suspended successfully', 'success');
            
            // Update loader message
            document.getElementById('loader-message').textContent = 'Refreshing data...';
            
            // Refresh the page to show updated status
            setTimeout(() => {
                window.location.reload();
            }, 1500);
        } else {
            loaderController.hide();
            let errorMessage = 'Failed to suspend user';
            try {
                const contentType = response.headers.get('content-type');
                if (contentType && contentType.includes('application/json')) {
                    const error = await response.json();
                    errorMessage = error.message || errorMessage;
                } else {
                    const errorText = await response.text();
                    if (errorText) {
                        errorMessage = errorText;
                    }
                }
            } catch (parseError) {
                console.error('Error parsing response:', parseError);
                errorMessage = `Server error: ${response.status} ${response.statusText}`;
            }
            showNotification(errorMessage, 'error');
        }
    } catch (error) {
        loaderController.hide();
        console.error('Error suspending user:', error);
        showNotification('An error occurred while suspending the user', 'error');
    }
}

// Initialize scroll functionality for the users table
initializeScrollFunctionality();

// Scroll functionality
function initializeScrollFunctionality() {
    const tableContainer = document.getElementById('users-table-container');
    const scrollToTopBtn = document.getElementById('scrollToTop');
    
    if (tableContainer && scrollToTopBtn) {
        // Show/hide scroll to top button based on scroll position
        tableContainer.addEventListener('scroll', function() {
            if (this.scrollTop > 200) {
                scrollToTopBtn.classList.add('visible');
            } else {
                scrollToTopBtn.classList.remove('visible');
            }
        });
        
        // Smooth scroll behavior
        tableContainer.style.scrollBehavior = 'smooth';
    }
}

function scrollToTop() {
    const tableContainer = document.getElementById('users-table-container');
    if (tableContainer) {
        tableContainer.scrollTo({
            top: 0,
            behavior: 'smooth'
        });
    }
}

// Enhanced scroll to specific user
function scrollToUser(userId) {
    const userRow = document.querySelector(`tr[data-user-id="${userId}"]`);
    if (userRow) {
        userRow.scrollIntoView({
            behavior: 'smooth',
            block: 'center'
        });
        
        // Highlight the row briefly
        userRow.style.backgroundColor = 'rgba(102, 126, 234, 0.2)';
        setTimeout(() => {
            userRow.style.backgroundColor = '';
        }, 2000);
    }
}

// Page load integration
document.addEventListener('DOMContentLoaded', function() {
    // Show loader on initial page load if we have many users
    const userCount = @Model.TotalUsers;
    const currentPage = @Model.CurrentPage;
    
    // Show loader for initial large data loads
    if (userCount > 50 && currentPage === 1) {
        const initialLoader = ProfessionalLoader.showWithDelay('Loading user data...', 100, 'users');
        
        // Hide loader once the page is fully loaded
        window.addEventListener('load', function() {
            setTimeout(() => {
                initialLoader.hide();
            }, 500); // Small delay to ensure smooth transition
        });
    }
    
    // Add loader to sort links
    document.querySelectorAll('.sort-link').forEach(link => {
        link.addEventListener('click', function(e) {
            e.preventDefault();
            const url = this.getAttribute('href');
            if (url) {
                handleNavigationWithLoader(url, 'Sorting data...');
            }
        });
    });
    
    // Add loader to filter form submission
    const filterForm = document.querySelector('#filterPanel form');
    if (filterForm) {
        filterForm.addEventListener('submit', function(e) {
            e.preventDefault();
            handleFormSubmissionWithLoader(this, 'Applying filters...');
        });
    }
    
    // Initialize scroll functionality for the users table
    initializeScrollFunctionality();
    
    // Auto-collapse filter panel if no filters are active
    const filterPanel = document.getElementById('filterPanel');
    const hasActiveFilters = @Html.Raw(Json.Serialize(!string.IsNullOrEmpty(Model.SearchTerm) || !string.IsNullOrEmpty(Model.RoleFilter) || !string.IsNullOrEmpty(Model.RelationFilter) || Model.CreatedFromDate.HasValue || Model.CreatedToDate.HasValue));
    
    if (!hasActiveFilters) {
        const collapseElement = new bootstrap.Collapse(filterPanel, {
            toggle: false
        });
    }
    
    // Hide loader on page unload/navigation
    window.addEventListener('beforeunload', function() {
        hideLoader();
    });
});

// Handle browser back/forward navigation
window.addEventListener('pageshow', function(event) {
    if (event.persisted) {
        hideLoader();
    }
});
</script>
