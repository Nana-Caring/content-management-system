@page
@model CMS.Web.Pages.Transactions.IndexModel
@{
    ViewData["Title"] = "Transactions Management";
}

<style>
    /* Account Balance Summary Card */
    .balance-summary-card {
        background: linear-gradient(135deg, #ffd54f 0%, #ff8a65 100%);
        border: none;
        border-radius: 15px;
        color: white;
        margin-bottom: 2rem;
        box-shadow: 0 4px 20px rgba(255, 213, 79, 0.3);
    }

    .balance-item {
        background: rgba(255, 255, 255, 0.1);
        border-radius: 10px;
        padding: 1rem;
        backdrop-filter: blur(10px);
        border: 1px solid rgba(255, 255, 255, 0.2);
    }

    .balance-amount {
        font-size: 1.5rem;
        font-weight: 700;
        color: white;
    }

    .account-type-badge {
        background: rgba(255, 255, 255, 0.2);
        color: white;
        border: 1px solid rgba(255, 255, 255, 0.3);
        font-size: 0.8rem;
        padding: 0.3rem 0.8rem;
    }

    /* Original transaction styles */
    .professional-table {
        font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, 'Helvetica Neue', Arial, sans-serif;
        font-size: 0.9rem;
        line-height: 1.6;
    }
    
    .professional-table th {
        font-size: 0.8rem;
        font-weight: 600;
        text-transform: uppercase;
        letter-spacing: 0.8px;
        padding: 1.2rem 1rem;
        border-bottom: 2px solid #dee2e6;
        background: linear-gradient(135deg, #343a40 0%, #495057 100%);
        color: white;
    }
    
    .professional-table td {
        font-size: 0.9rem;
        padding: 1rem;
        vertical-align: middle;
        border-bottom: 1px solid #f1f3f4;
        color: #2c3e50;
        line-height: 1.5;
    }
    
    .professional-table tbody tr {
        transition: all 0.2s ease;
    }
    
    .professional-table tbody tr:hover {
        background-color: rgba(102, 126, 234, 0.05);
        transform: translateY(-1px);
        box-shadow: 0 2px 8px rgba(0,0,0,0.1);
    }
    
    .transaction-card {
        border: none;
        box-shadow: 0 2px 12px rgba(0,0,0,0.08);
        border-radius: 12px;
        transition: all 0.3s ease;
    }
    
    .transaction-card:hover {
        box-shadow: 0 4px 20px rgba(0,0,0,0.12);
    }
    
    .filter-card {
        border: none;
        box-shadow: 0 1px 8px rgba(0,0,0,0.06);
        border-radius: 10px;
        background: linear-gradient(135deg, #f8f9fa 0%, #ffffff 100%);
    }
    
    .stats-badge {
        background: linear-gradient(135deg, #ffd54f 0%, #ff8a65 100%);
        border: none;
        padding: 0.5rem 1rem;
        font-size: 0.875rem;
        font-weight: 500;
        color: #fff;
    }
    
    .sort-link {
        color: #ffffff !important;
        text-decoration: none !important;
        transition: all 0.2s ease;
        display: flex;
        align-items: center;
        gap: 0.5rem;
        font-family: inherit;
        font-weight: 600;
        font-size: 0.8rem;
    }
    
    .sort-link:hover {
        color: #e3f2fd !important;
        transform: translateY(-1px);
    }
    
    .sort-icon {
        font-size: 0.7rem;
        opacity: 0.8;
    }
    
    .modern-btn {
        border-radius: 8px;
        padding: 0.5rem 1.25rem;
        font-weight: 500;
        transition: all 0.2s ease;
        border: none;
    }
    
    .modern-btn:hover {
        transform: translateY(-1px);
        box-shadow: 0 4px 8px rgba(0,0,0,0.15);
    }
    
    .transaction-badge {
        font-size: 0.75rem;
        padding: 0.4rem 0.8rem;
        border-radius: 8px;
        font-weight: 600;
        text-transform: uppercase;
        letter-spacing: 0.5px;
        font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
    }
    
    .id-badge {
        background: linear-gradient(135deg, #e3f2fd 0%, #f3e5f5 100%);
        color: #5e35b1;
        font-weight: 700;
        font-size: 0.75rem;
        padding: 0.35rem 0.7rem;
        border-radius: 10px;
        font-family: 'Courier New', Consolas, monospace;
        letter-spacing: 0.5px;
    }
    
    .amount-positive {
        color: #2e7d32;
        font-weight: 600;
    }
    
    .amount-negative {
        color: #d32f2f;
        font-weight: 600;
    }
    
    .page-header {
        background: linear-gradient(135deg, #ffd54f 0%, #ff8a65 100%);
        color: white;
        padding: 2rem;
        border-radius: 15px;
        margin-bottom: 2rem;
        box-shadow: 0 4px 20px rgba(255, 213, 79, 0.3);
    }
    
    .empty-state {
        padding: 3rem 2rem;
        text-align: center;
        color: #6c757d;
    }
    
    .empty-state i {
        color: #dee2e6;
        margin-bottom: 1rem;
    }

    /* Scrollable Table Container */
    .scrollable-table-container {
        max-height: 600px;
        overflow-y: auto;
        border-radius: 12px;
        box-shadow: 0 4px 20px rgba(0,0,0,0.1);
        background: white;
        position: relative;
    }

    .scrollable-table-container::-webkit-scrollbar {
        width: 8px;
    }

    .scrollable-table-container::-webkit-scrollbar-track {
        background: #f1f3f4;
        border-radius: 4px;
    }

    .scrollable-table-container::-webkit-scrollbar-thumb {
        background: linear-gradient(135deg, #ffd54f 0%, #ff8a65 100%);
        border-radius: 4px;
        transition: background 0.2s ease;
    }

    .scrollable-table-container::-webkit-scrollbar-thumb:hover {
        background: linear-gradient(135deg, #ffcc02 0%, #ff7043 100%);
    }

    /* Sticky Header */
    .scrollable-table-container thead th {
        position: sticky;
        top: 0;
        z-index: 10;
        background: linear-gradient(135deg, #343a40 0%, #495057 100%);
        box-shadow: 0 2px 4px rgba(0,0,0,0.1);
    }

    /* Scroll to Top Button */
    .scroll-to-top {
        position: fixed;
        bottom: 30px;
        right: 30px;
        background: linear-gradient(135deg, #ffd54f 0%, #ff8a65 100%);
        color: white;
        border: none;
        border-radius: 50%;
        width: 50px;
        height: 50px;
        display: none;
        align-items: center;
        justify-content: center;
        box-shadow: 0 4px 12px rgba(255, 213, 79, 0.3);
        transition: all 0.3s ease;
        z-index: 1000;
        cursor: pointer;
    }

    .scroll-to-top:hover {
        transform: translateY(-2px);
        box-shadow: 0 6px 16px rgba(255, 213, 79, 0.4);
    }

    .scroll-to-top.show {
        display: flex;
    }
</style>

<div class="page-header">
    <div class="d-flex justify-content-between align-items-center">
        <div>
            <h1 class="h3 mb-2 fw-bold">Transactions Management</h1>
            <p class="mb-0 opacity-75">Monitor all financial transactions and account balances</p>
        </div>
        <div class="d-flex gap-3 align-items-center">
            <span class="stats-badge badge">
                Total: @Model.Transactions.Count Transactions
            </span>
            <button class="btn btn-light modern-btn" onclick="displayTransactionStats()">
                <i class="fas fa-chart-bar me-2"></i>Statistics
            </button>
            <button class="btn btn-success modern-btn" data-bs-toggle="modal" data-bs-target="#createTransactionModal">
                <i class="fas fa-plus me-2"></i>Create Transaction
            </button>
            <button class="btn btn-light modern-btn" type="button" data-bs-toggle="collapse" data-bs-target="#filterPanel">
                <i class="fas fa-filter me-2"></i>Advanced Filters
            </button>
        </div>
    </div>
</div>
<!-- Advanced Filter Panel -->
<div class="collapse mb-4" id="filterPanel">
    <div class="card filter-card">
        <div class="card-body">
            <h6 class="card-title mb-3">
                <i class="fas fa-sliders-h me-2"></i>Advanced Search & Filters
            </h6>
            <form method="get" class="row g-3">
                <div class="col-md-4">
                    <label class="form-label">Search</label>
                    <input type="text" class="form-control" name="search" value="@Model.SearchTerm" 
                           placeholder="Search by description, type, ID...">
                </div>
                <div class="col-md-3">
                    <label class="form-label">Transaction Type</label>
                    <select class="form-select" name="typeFilter" value="@Request.Query["typeFilter"]">
                        <option value="">All Types</option>
                        <option value="credit" selected="@(Request.Query["typeFilter"] == "credit")">Credit</option>
                        <option value="debit" selected="@(Request.Query["typeFilter"] == "debit")">Debit</option>
                    </select>
                </div>
                <div class="col-md-3">
                    <label class="form-label">Amount Range</label>
                    <select class="form-select" name="amountRange" value="@Request.Query["amountRange"]">
                        <option value="">All Amounts</option>
                        <option value="0-100" selected="@(Request.Query["amountRange"] == "0-100")">$0 - $100</option>
                        <option value="100-1000" selected="@(Request.Query["amountRange"] == "100-1000")">$100 - $1,000</option>
                        <option value="1000+" selected="@(Request.Query["amountRange"] == "1000+")">$1,000+</option>
                    </select>
                </div>
                <div class="col-md-2">
                    <label class="form-label">&nbsp;</label>
                    <div class="d-grid">
                        <button type="submit" class="btn btn-primary modern-btn">
                            <i class="fas fa-search me-1"></i>Filter
                        </button>
                    </div>
                </div>
            </form>
        </div>
    </div>
</div>

@if (!string.IsNullOrEmpty(Model.ErrorMessage))
{
    <div class="alert alert-danger alert-dismissible fade show" role="alert">
        @Model.ErrorMessage
        <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
    </div>
}

@if (TempData["SuccessMessage"] != null)
{
    <div class="alert alert-success alert-dismissible fade show" role="alert">
        @TempData["SuccessMessage"]
        <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
    </div>
}

@if (TempData["ErrorMessage"] != null)
{
    <div class="alert alert-danger alert-dismissible fade show" role="alert">
        @TempData["ErrorMessage"]
        <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
    </div>
}

<!-- Search Bar -->
<div class="card mb-4">
    <div class="card-body">
        <form method="get" class="row g-3">
            <div class="col-md-10">
                <input type="text" class="form-control" name="search" value="@Model.SearchTerm" 
                       placeholder="Search by description, type, or amount...">
            </div>
            <div class="col-md-2">
                <button type="submit" class="btn btn-primary w-100">
                    <i class="fas fa-search me-2"></i>Search
                </button>
            </div>
        </form>
    </div>
</div>

<div class="card transaction-card">
    <div class="card-body">
        <div class="scrollable-table-container">
            <table class="table table-hover align-middle mb-0 professional-table">
                <thead class="table-dark">
                    <tr>
                        <th>
                            <a asp-page="./Index" asp-route-search="@Model.SearchTerm" asp-route-sortField="Id" asp-route-sortDirection="@(Model.GetNextSortDirection("Id"))" class="sort-link">
                                ID
                                @if (Model.SortField == "Id")
                                {
                                    <i class="fas fa-sort-@(Model.SortDirection == "asc" ? "up" : "down") sort-icon"></i>
                                }
                                else
                                {
                                    <i class="fas fa-sort sort-icon"></i>
                                }
                            </a>
                        </th>
                        <th>
                            <a asp-page="./Index" asp-route-search="@Model.SearchTerm" asp-route-sortField="AccountId" asp-route-sortDirection="@(Model.GetNextSortDirection("AccountId"))" class="sort-link">
                                Account ID
                                @if (Model.SortField == "AccountId")
                                {
                                    <i class="fas fa-sort-@(Model.SortDirection == "asc" ? "up" : "down") sort-icon"></i>
                                }
                                else
                                {
                                    <i class="fas fa-sort sort-icon"></i>
                                }
                            </a>
                        </th>
                        <th>
                            <a asp-page="./Index" asp-route-search="@Model.SearchTerm" asp-route-sortField="Type" asp-route-sortDirection="@(Model.GetNextSortDirection("Type"))" class="sort-link">
                                Type
                                @if (Model.SortField == "Type")
                                {
                                    <i class="fas fa-sort-@(Model.SortDirection == "asc" ? "up" : "down") sort-icon"></i>
                                }
                                else
                                {
                                    <i class="fas fa-sort sort-icon"></i>
                                }
                            </a>
                        </th>
                        <th>
                            <a asp-page="./Index" asp-route-search="@Model.SearchTerm" asp-route-sortField="Amount" asp-route-sortDirection="@(Model.GetNextSortDirection("Amount"))" class="sort-link">
                                Amount
                                @if (Model.SortField == "Amount")
                                {
                                    <i class="fas fa-sort-@(Model.SortDirection == "asc" ? "up" : "down") sort-icon"></i>
                                }
                                else
                                {
                                    <i class="fas fa-sort sort-icon"></i>
                                }
                            </a>
                        </th>
                        <th>
                            <a asp-page="./Index" asp-route-search="@Model.SearchTerm" asp-route-sortField="Date" asp-route-sortDirection="@(Model.GetNextSortDirection("Date"))" class="sort-link">
                                Date
                                @if (Model.SortField == "Date")
                                {
                                    <i class="fas fa-sort-@(Model.SortDirection == "asc" ? "up" : "down") sort-icon"></i>
                                }
                                else
                                {
                                    <i class="fas fa-sort sort-icon"></i>
                                }
                            </a>
                        </th>
                        <th>Description</th>
                        <th>Actions</th>
                    </tr>
                </thead>
                <tbody>
                @if (Model.Transactions != null && Model.Transactions.Any())
                {
                    foreach (var transaction in Model.Transactions)
                    {
                        <tr>
                            <td><span class="badge bg-light text-dark id-badge">#@transaction.Id</span></td>
                            <td><code>@transaction.AccountId</code></td>
                            <td>
                                @if (transaction.Type?.ToLower() == "credit")
                                {
                                    <span class="badge bg-success transaction-badge">Credit</span>
                                }
                                else if (transaction.Type?.ToLower() == "debit")
                                {
                                    <span class="badge bg-danger transaction-badge">Debit</span>
                                }
                                else
                                {
                                    <span class="badge bg-secondary transaction-badge">@(transaction.Type ?? "Unknown")</span>
                                }
                            </td>
                            <td>
                                @if (transaction.Type?.ToLower() == "credit")
                                {
                                    <strong class="text-success amount-positive">+@transaction.Amount.ToString("C")</strong>
                                }
                                else
                                {
                                    <strong class="text-danger amount-negative">-@transaction.Amount.ToString("C")</strong>
                                }
                            </td>
                            <td>@transaction.Date.ToString("MMM dd, yyyy")</td>
                            <td>@(transaction.Description ?? "No description")</td>
                            <td>
                                <div class="btn-group" role="group">
                                    <button type="button" class="btn btn-sm btn-outline-primary" 
                                            data-bs-toggle="modal" 
                                            data-bs-target="#editTransactionModal" 
                                            data-transaction-id="@transaction.Id" 
                                            data-transaction-desc="@(transaction.Description ?? "")"
                                            title="Edit Transaction">
                                        <i class="fas fa-edit"></i>
                                    </button>
                                    <button type="button" class="btn btn-sm btn-outline-warning" 
                                            data-bs-toggle="modal" 
                                            data-bs-target="#reverseTransactionModal" 
                                            data-transaction-id="@transaction.Id" 
                                            data-transaction-desc="@(transaction.Description ?? "Transaction #" + transaction.Id)"
                                            data-transaction-amount="@transaction.Amount"
                                            data-transaction-type="@transaction.Type"
                                            title="Reverse Transaction">
                                        <i class="fas fa-undo"></i>
                                    </button>
                                    <button type="button" class="btn btn-sm btn-outline-danger" 
                                            data-bs-toggle="modal" 
                                            data-bs-target="#deleteModal" 
                                            data-transaction-id="@transaction.Id" 
                                            data-transaction-desc="@(transaction.Description ?? "Transaction #" + transaction.Id)"
                                            title="Delete Transaction">
                                        <i class="fas fa-trash"></i>
                                    </button>
                                </div>
                            </td>
                        </tr>
                    }
                }
                else
                {
                    <tr>
                        <td colspan="7" class="text-center py-4 empty-state">
                            <div class="text-muted">
                                <i class="fas fa-exchange-alt fa-3x mb-3"></i>
                                <p>No transactions found.</p>
                                @if (!string.IsNullOrEmpty(Model.SearchTerm))
                                {
                                    <p>Try adjusting your search terms.</p>
                                }
                            </div>
                        </td>
                    </tr>
                }
                </tbody>
            </table>
        </div>
    </div>
</div>

<!-- Scroll to Top Button -->
<button class="scroll-to-top" id="scrollToTop" onclick="scrollToTop()">
    <i class="fas fa-chevron-up"></i>
</button>

<!-- Delete Confirmation Modal -->
<div class="modal fade" id="deleteModal" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Confirm Delete</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <p>Are you sure you want to delete transaction <strong id="transactionDesc"></strong>?</p>
                <p class="text-muted">This action cannot be undone and will adjust the account balance.</p>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-danger" id="confirmDeleteBtn">Delete Transaction</button>
            </div>
        </div>
    </div>
</div>

<!-- Create Transaction Modal -->
<div class="modal fade" id="createTransactionModal" tabindex="-1">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">
                    <i class="fas fa-plus me-2"></i>Create Manual Transaction
                </h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <form id="createTransactionForm">
                <div class="modal-body">
                    <div class="row g-3">
                        <div class="col-md-6">
                            <label for="accountId" class="form-label">Account ID <span class="text-danger">*</span></label>
                            <input type="text" class="form-control" id="accountId" name="accountId" required 
                                   placeholder="Enter account UUID">
                            <div class="form-text">The target account for this transaction</div>
                        </div>
                        <div class="col-md-6">
                            <label for="amount" class="form-label">Amount <span class="text-danger">*</span></label>
                            <div class="input-group">
                                <span class="input-group-text">R</span>
                                <input type="number" class="form-control" id="amount" name="amount" 
                                       required min="0.01" step="0.01" placeholder="0.00">
                            </div>
                        </div>
                        <div class="col-md-6">
                            <label for="type" class="form-label">Transaction Type <span class="text-danger">*</span></label>
                            <select class="form-select" id="type" name="type" required>
                                <option value="">Select Type</option>
                                <option value="Credit">Credit (Add Money)</option>
                                <option value="Debit">Debit (Subtract Money)</option>
                            </select>
                        </div>
                        <div class="col-md-6">
                            <label for="reference" class="form-label">Reference</label>
                            <input type="text" class="form-control" id="reference" name="reference" 
                                   placeholder="Auto-generated if empty">
                        </div>
                        <div class="col-12">
                            <label for="description" class="form-label">Description</label>
                            <textarea class="form-control" id="description" name="description" rows="2" 
                                      placeholder="Transaction description"></textarea>
                        </div>
                        <div class="col-md-6">
                            <label for="reason" class="form-label">Reason</label>
                            <input type="text" class="form-control" id="reason" name="reason" 
                                   placeholder="Reason for manual transaction">
                        </div>
                        <div class="col-md-6">
                            <label for="category" class="form-label">Category</label>
                            <select class="form-select" id="category" name="category">
                                <option value="adjustment">Adjustment</option>
                                <option value="correction">Correction</option>
                                <option value="refund">Refund</option>
                                <option value="bonus">Bonus</option>
                                <option value="penalty">Penalty</option>
                                <option value="other">Other</option>
                            </select>
                        </div>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                    <button type="submit" class="btn btn-success">
                        <i class="fas fa-plus me-1"></i>Create Transaction
                    </button>
                </div>
            </form>
        </div>
    </div>
</div>

<!-- Edit Transaction Modal -->
<div class="modal fade" id="editTransactionModal" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">
                    <i class="fas fa-edit me-2"></i>Edit Transaction
                </h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <form id="editTransactionForm">
                <div class="modal-body">
                    <input type="hidden" id="editTransactionId" name="transactionId">
                    <div class="mb-3">
                        <label for="editDescription" class="form-label">Description</label>
                        <textarea class="form-control" id="editDescription" name="description" rows="3" 
                                  placeholder="Update transaction description"></textarea>
                        <div class="form-text">Only the description can be modified for safety reasons.</div>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                    <button type="submit" class="btn btn-primary">
                        <i class="fas fa-save me-1"></i>Update Transaction
                    </button>
                </div>
            </form>
        </div>
    </div>
</div>

<!-- Reverse Transaction Modal -->
<div class="modal fade" id="reverseTransactionModal" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">
                    <i class="fas fa-undo me-2"></i>Reverse Transaction
                </h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <form id="reverseTransactionForm">
                <div class="modal-body">
                    <input type="hidden" id="reverseTransactionId" name="transactionId">
                    <div class="alert alert-warning">
                        <i class="fas fa-exclamation-triangle me-2"></i>
                        <strong>Warning:</strong> This will create a reversal transaction that undoes the original transaction.
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Transaction Details:</label>
                        <div class="card bg-light">
                            <div class="card-body py-2">
                                <div><strong>Description:</strong> <span id="reverseTransactionDesc"></span></div>
                                <div><strong>Amount:</strong> <span id="reverseTransactionAmount"></span></div>
                                <div><strong>Type:</strong> <span id="reverseTransactionType"></span></div>
                            </div>
                        </div>
                    </div>
                    <div class="mb-3">
                        <label for="reverseReason" class="form-label">Reason for Reversal <span class="text-danger">*</span></label>
                        <textarea class="form-control" id="reverseReason" name="reason" rows="3" 
                                  required placeholder="Explain why this transaction is being reversed"></textarea>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                    <button type="submit" class="btn btn-warning">
                        <i class="fas fa-undo me-1"></i>Reverse Transaction
                    </button>
                </div>
            </form>
        </div>
    </div>
</div>

<script>
// Professional Loader Functions - Using Global Loader
// Legacy compatibility maintained for existing code
function showLoader(message = 'Loading...') {
    ProfessionalLoader.show(message, 'transactions');
}

function hideLoader() {
    ProfessionalLoader.hide();
}

// Show loader with delay to avoid flicker on fast loads
function showLoaderWithDelay(message = 'Loading...', delay = 200) {
    return ProfessionalLoader.showWithDelay(message, delay, 'transactions');
}

// API Configuration
const API_BASE_URL = 'https://nanacaring-backend.onrender.com';

// API Integration Functions
async function getAccountBalances() {
    try {
        const response = await fetch(`${API_BASE_URL}/api/accounts/my-accounts`, {
            method: 'GET',
            headers: {
                'Content-Type': 'application/json',
                'Authorization': `Bearer ${getAuthToken()}`
            }
        });
        
        if (response.ok) {
            const data = await response.json();
            return data;
        } else {
            throw new Error('Failed to fetch account balances');
        }
    } catch (error) {
        console.error('Error fetching account balances:', error);
        return null;
    }
}

async function getAccountSummary(accountId) {
    try {
        const response = await fetch(`${API_BASE_URL}/api/accounts/summary/${accountId}`, {
            method: 'GET',
            headers: {
                'Content-Type': 'application/json',
                'Authorization': `Bearer ${getAuthToken()}`
            }
        });
        
        if (response.ok) {
            const data = await response.json();
            return data;
        } else {
            throw new Error('Failed to fetch account summary');
        }
    } catch (error) {
        console.error('Error fetching account summary:', error);
        return null;
    }
}

async function getAccountsByType(accountType) {
    try {
        const response = await fetch(`${API_BASE_URL}/api/accounts/type/${accountType}`, {
            method: 'GET',
            headers: {
                'Content-Type': 'application/json',
                'Authorization': `Bearer ${getAuthToken()}`
            }
        });
        
        if (response.ok) {
            const data = await response.json();
            return data;
        } else {
            throw new Error(`Failed to fetch ${accountType} accounts`);
        }
    } catch (error) {
        console.error(`Error fetching ${accountType} accounts:`, error);
        return null;
    }
}

// Helper function to get auth token (you may need to adjust this based on your auth implementation)
function getAuthToken() {
    // Try multiple sources for the JWT token
    const token = localStorage.getItem('authToken') || 
                  sessionStorage.getItem('authToken') || 
                  localStorage.getItem('jwt_token') ||
                  sessionStorage.getItem('jwt_token') ||
                  getCookie('authToken') ||
                  getCookie('jwt_token');
    
    return token || '';
}

// Helper function to get cookie value
function getCookie(name) {
    const value = `; ${document.cookie}`;
    const parts = value.split(`; ${name}=`);
    if (parts.length === 2) return parts.pop().split(';').shift();
}

// Additional API Functions for comprehensive account management

async function getDependentAccounts(dependentId) {
    try {
        const response = await fetch(`${API_BASE_URL}/api/accounts/dependent/${dependentId}`, {
            method: 'GET',
            headers: {
                'Content-Type': 'application/json',
                'Authorization': `Bearer ${getAuthToken()}`
            }
        });
        
        if (response.ok) {
            const data = await response.json();
            return data;
        } else {
            throw new Error('Failed to fetch dependent accounts');
        }
    } catch (error) {
        console.error('Error fetching dependent accounts:', error);
        return null;
    }
}

async function getAccountByNumber(accountNumber) {
    try {
        const response = await fetch(`${API_BASE_URL}/api/accounts/balance/number/${accountNumber}`, {
            method: 'GET',
            headers: {
                'Content-Type': 'application/json',
                'Authorization': `Bearer ${getAuthToken()}`
            }
        });
        
        if (response.ok) {
            const data = await response.json();
            return data;
        } else {
            throw new Error('Failed to fetch account by number');
        }
    } catch (error) {
        console.error('Error fetching account by number:', error);
        return null;
    }
}

async function getAccountStats() {
    try {
        const response = await fetch(`${API_BASE_URL}/api/accounts/admin/stats`, {
            method: 'GET',
            headers: {
                'Content-Type': 'application/json',
                'Authorization': `Bearer ${getAuthToken()}`
            }
        });
        
        if (response.ok) {
            const data = await response.json();
            return data;
        } else {
            throw new Error('Failed to fetch account statistics');
        }
    } catch (error) {
        console.error('Error fetching account statistics:', error);
        return null;
    }
}

async function getAllAccounts(page = 1, limit = 20, accountType = '', status = '') {
    try {
        const params = new URLSearchParams({
            page: page.toString(),
            limit: limit.toString()
        });
        
        if (accountType) params.append('accountType', accountType);
        if (status) params.append('status', status);
        
        const response = await fetch(`${API_BASE_URL}/api/accounts/admin/all?${params}`, {
            method: 'GET',
            headers: {
                'Content-Type': 'application/json',
                'Authorization': `Bearer ${getAuthToken()}`
            }
        });
        
        if (response.ok) {
            const data = await response.json();
            return data;
        } else {
            throw new Error('Failed to fetch all accounts');
        }
    } catch (error) {
        console.error('Error fetching all accounts:', error);
        return null;
    }
}

// Display transaction statistics
async function displayTransactionStats() {
    const loaderController = showLoaderWithDelay('Loading transaction statistics...', 100);
    
    try {
        const statsData = await getTransactionStats();
        
        if (statsData && statsData.success) {
            const statsSummary = document.getElementById('stats-summary');
            const transactionStatsContainer = document.getElementById('transaction-stats');
            
            // Show the stats summary card
            statsSummary.style.display = 'block';
            
            // Clear existing content
            transactionStatsContainer.innerHTML = '';
            
            const summary = statsData.data.summary;
            
            // Create stat cards
            const statCards = [
                {
                    title: 'Total Transactions',
                    value: summary.totalTransactions,
                    icon: 'fa-list',
                    color: 'rgba(255, 255, 255, 0.1)'
                },
                {
                    title: 'Credit Transactions',
                    value: summary.creditTransactions,
                    icon: 'fa-arrow-up',
                    color: 'rgba(76, 175, 80, 0.2)'
                },
                {
                    title: 'Debit Transactions',
                    value: summary.debitTransactions,
                    icon: 'fa-arrow-down',
                    color: 'rgba(244, 67, 54, 0.2)'
                },
                {
                    title: 'Total Credit Amount',
                    value: `R ${parseFloat(summary.totalCreditAmount || 0).toLocaleString('en-ZA', { minimumFractionDigits: 2 })}`,
                    icon: 'fa-plus-circle',
                    color: 'rgba(76, 175, 80, 0.2)'
                },
                {
                    title: 'Total Debit Amount',
                    value: `R ${parseFloat(summary.totalDebitAmount || 0).toLocaleString('en-ZA', { minimumFractionDigits: 2 })}`,
                    icon: 'fa-minus-circle',
                    color: 'rgba(244, 67, 54, 0.2)'
                },
                {
                    title: 'Net Amount',
                    value: `R ${parseFloat(summary.netAmount || 0).toLocaleString('en-ZA', { minimumFractionDigits: 2 })}`,
                    icon: 'fa-balance-scale',
                    color: 'rgba(255, 193, 7, 0.2)'
                },
                {
                    title: 'Average Transaction',
                    value: `R ${parseFloat(summary.averageTransactionAmount || 0).toLocaleString('en-ZA', { minimumFractionDigits: 2 })}`,
                    icon: 'fa-chart-line',
                    color: 'rgba(156, 39, 176, 0.2)'
                }
            ];
            
            statCards.forEach(stat => {
                const col = document.createElement('div');
                col.className = 'col-md-4 col-sm-6 mb-3';
                col.innerHTML = `
                    <div class="p-3 rounded" style="background: ${stat.color}; border: 1px solid rgba(255, 255, 255, 0.2);">
                        <div class="d-flex justify-content-between align-items-center">
                            <div>
                                <div class="small opacity-75">${stat.title}</div>
                                <div class="h5 mb-0 fw-bold">${stat.value}</div>
                            </div>
                            <i class="fas ${stat.icon} fa-2x opacity-50"></i>
                        </div>
                    </div>
                `;
                transactionStatsContainer.appendChild(col);
            });
            
        } else {
            // Handle error state
            const statsSummary = document.getElementById('stats-summary');
            statsSummary.style.display = 'block';
            
            const transactionStatsContainer = document.getElementById('transaction-stats');
            transactionStatsContainer.innerHTML = `
                <div class="col-12">
                    <div class="text-center text-white">
                        <i class="fas fa-exclamation-triangle fa-3x mb-3 opacity-50"></i>
                        <h6>Unable to Load Transaction Statistics</h6>
                        <p class="small">There was an error loading the statistics.</p>
                        <button class="btn btn-light btn-sm" onclick="refreshTransactionStats()">
                            <i class="fas fa-sync-alt me-1"></i>Try Again
                        </button>
                    </div>
                </div>
            `;
        }
    } catch (error) {
        console.error('Error displaying transaction stats:', error);
        showNotification('Failed to load transaction statistics', 'error');
    } finally {
        loaderController.hide();
    }
}

// Refresh transaction statistics
async function refreshTransactionStats() {
    await displayTransactionStats();
    showNotification('Transaction statistics refreshed successfully', 'success');
}

// Handle navigation with loader
function handleNavigationWithLoader(url, message = 'Loading page...') {
    ProfessionalLoader.navigateWithLoader(url, message);
}

// Handle form submission with loader
function handleFormSubmissionWithLoader(form, message = 'Processing...') {
    ProfessionalLoader.submitFormWithLoader(form, message);
}

// Admin Transaction Management API Functions
const ADMIN_API_BASE_URL = '/api/admin/transactions';

// Enhanced delete transaction with actual API call
async function deleteTransactionWithLoader(transactionId) {
    const loaderController = showLoaderWithDelay('Deleting transaction...', 100);
    
    try {
        const response = await fetch(`${ADMIN_API_BASE_URL}/${transactionId}`, {
            method: 'DELETE',
            headers: {
                'Content-Type': 'application/json',
                'Authorization': `Bearer ${getAuthToken()}`
            },
            body: JSON.stringify({
                confirmDelete: true,
                adjustBalance: true
            })
        });

        if (response.ok) {
            const result = await response.json();
            showNotification('Transaction deleted successfully', 'success');
            // Reload the page to show updated data
            setTimeout(() => {
                window.location.reload();
            }, 1000);
        } else {
            const error = await response.json();
            throw new Error(error.message || 'Failed to delete transaction');
        }
    } catch (error) {
        loaderController.hide();
        console.error('Error deleting transaction:', error);
        showNotification(error.message || 'Failed to delete transaction', 'error');
    }
}

// Get all transactions with advanced filtering
async function getAdminTransactions(params = {}) {
    try {
        const searchParams = new URLSearchParams({
            page: params.page || 1,
            limit: params.limit || 20,
            sortBy: params.sortBy || 'createdAt',
            sortOrder: params.sortOrder || 'DESC',
            ...params
        });

        const response = await fetch(`${ADMIN_API_BASE_URL}?${searchParams}`, {
            method: 'GET',
            headers: {
                'Content-Type': 'application/json',
                'Authorization': `Bearer ${getAuthToken()}`
            }
        });

        if (response.ok) {
            return await response.json();
        } else {
            throw new Error('Failed to fetch transactions');
        }
    } catch (error) {
        console.error('Error fetching admin transactions:', error);
        return null;
    }
}

// Get transaction statistics
async function getTransactionStats(params = {}) {
    try {
        const searchParams = new URLSearchParams(params);
        const response = await fetch(`${ADMIN_API_BASE_URL}/stats?${searchParams}`, {
            method: 'GET',
            headers: {
                'Content-Type': 'application/json',
                'Authorization': `Bearer ${getAuthToken()}`
            }
        });

        if (response.ok) {
            return await response.json();
        } else {
            throw new Error('Failed to fetch transaction statistics');
        }
    } catch (error) {
        console.error('Error fetching transaction stats:', error);
        return null;
    }
}

// Create manual transaction
async function createManualTransaction(transactionData) {
    const loaderController = showLoaderWithDelay('Creating transaction...', 100);
    
    try {
        const response = await fetch(ADMIN_API_BASE_URL, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'Authorization': `Bearer ${getAuthToken()}`
            },
            body: JSON.stringify(transactionData)
        });

        if (response.ok) {
            const result = await response.json();
            showNotification('Transaction created successfully', 'success');
            return result;
        } else {
            const error = await response.json();
            throw new Error(error.message || 'Failed to create transaction');
        }
    } catch (error) {
        console.error('Error creating transaction:', error);
        showNotification(error.message || 'Failed to create transaction', 'error');
        return null;
    } finally {
        loaderController.hide();
    }
}

// Update transaction
async function updateTransaction(transactionId, updateData) {
    const loaderController = showLoaderWithDelay('Updating transaction...', 100);
    
    try {
        const response = await fetch(`${ADMIN_API_BASE_URL}/${transactionId}`, {
            method: 'PUT',
            headers: {
                'Content-Type': 'application/json',
                'Authorization': `Bearer ${getAuthToken()}`
            },
            body: JSON.stringify(updateData)
        });

        if (response.ok) {
            const result = await response.json();
            showNotification('Transaction updated successfully', 'success');
            return result;
        } else {
            const error = await response.json();
            throw new Error(error.message || 'Failed to update transaction');
        }
    } catch (error) {
        console.error('Error updating transaction:', error);
        showNotification(error.message || 'Failed to update transaction', 'error');
        return null;
    } finally {
        loaderController.hide();
    }
}

// Reverse transaction
async function reverseTransaction(transactionId, reason) {
    const loaderController = showLoaderWithDelay('Reversing transaction...', 100);
    
    try {
        const response = await fetch(`${ADMIN_API_BASE_URL}/${transactionId}/reverse`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'Authorization': `Bearer ${getAuthToken()}`
            },
            body: JSON.stringify({ reason })
        });

        if (response.ok) {
            const result = await response.json();
            showNotification('Transaction reversed successfully', 'success');
            // Reload the page to show updated data
            setTimeout(() => {
                window.location.reload();
            }, 1000);
            return result;
        } else {
            const error = await response.json();
            throw new Error(error.message || 'Failed to reverse transaction');
        }
    } catch (error) {
        console.error('Error reversing transaction:', error);
        showNotification(error.message || 'Failed to reverse transaction', 'error');
        return null;
    } finally {
        loaderController.hide();
    }
}

// Bulk operations
async function bulkDeleteTransactions(transactionIds) {
    const loaderController = showLoaderWithDelay('Deleting transactions...', 100);
    
    try {
        const response = await fetch(`${ADMIN_API_BASE_URL}/bulk`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'Authorization': `Bearer ${getAuthToken()}`
            },
            body: JSON.stringify({
                operation: 'delete',
                transactionIds: transactionIds,
                data: { confirmDelete: true }
            })
        });

        if (response.ok) {
            const result = await response.json();
            showNotification(`${result.data.deletedCount} transactions deleted successfully`, 'success');
            // Reload the page to show updated data
            setTimeout(() => {
                window.location.reload();
            }, 1000);
            return result;
        } else {
            const error = await response.json();
            throw new Error(error.message || 'Failed to delete transactions');
        }
    } catch (error) {
        console.error('Error bulk deleting transactions:', error);
        showNotification(error.message || 'Failed to delete transactions', 'error');
        return null;
    } finally {
        loaderController.hide();
    }
}

// Notification function
function showNotification(message, type) {
    const alertClass = type === 'success' ? 'alert-success' : 'alert-danger';
    const iconClass = type === 'success' ? 'fa-check-circle' : 'fa-exclamation-triangle';
    
    const notification = document.createElement('div');
    notification.className = `alert ${alertClass} alert-dismissible fade show position-fixed`;
    notification.style.cssText = 'top: 20px; right: 20px; z-index: 9999; min-width: 300px;';
    notification.innerHTML = `
        <div class="d-flex align-items-center">
            <i class="fas ${iconClass} me-2"></i>
            <span>${message}</span>
            <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
        </div>
    `;
    
    document.body.appendChild(notification);
    
    // Auto-remove after 5 seconds
    setTimeout(() => {
        if (notification && notification.parentNode) {
            notification.remove();
        }
    }, 5000);
}

// Page initialization
document.addEventListener('DOMContentLoaded', function() {
    // Show loader for initial large data loads
    const transactionCount = @(Model.Transactions?.Count ?? 0);
    
    if (transactionCount > 20) {
        const initialLoader = showLoaderWithDelay('Loading transaction data...', 100);
        
        // Hide loader once the page is fully loaded
        window.addEventListener('load', function() {
            setTimeout(() => {
                initialLoader.hide();
            }, 500);
        });
    }
    
    // Add loader to sort links
    document.querySelectorAll('.sort-link').forEach(link => {
        link.addEventListener('click', function(e) {
            e.preventDefault();
            const url = this.getAttribute('href');
            if (url) {
                handleNavigationWithLoader(url, 'Sorting transactions...');
            }
        });
    });
    
    // Add loader to search form
    const searchForms = document.querySelectorAll('form[method="get"]');
    searchForms.forEach(form => {
        form.addEventListener('submit', function(e) {
            e.preventDefault();
            handleFormSubmissionWithLoader(this, 'Searching transactions...');
        });
    });
    
    // Enhanced delete modal functionality
    const deleteModal = document.getElementById('deleteModal');
    if (deleteModal) {
        deleteModal.addEventListener('show.bs.modal', function(event) {
            const button = event.relatedTarget;
            const transactionId = button.getAttribute('data-transaction-id');
            const transactionDesc = button.getAttribute('data-transaction-desc');
            
            document.getElementById('transactionDesc').textContent = transactionDesc;
            
            // Set up the confirm delete button
            const confirmDeleteBtn = document.getElementById('confirmDeleteBtn');
            confirmDeleteBtn.onclick = function() {
                deleteTransactionWithLoader(transactionId);
                deleteModal.querySelector('[data-bs-dismiss="modal"]').click();
            };
        });
    }
    
    // Create transaction modal and form handling
    const createTransactionForm = document.getElementById('createTransactionForm');
    if (createTransactionForm) {
        createTransactionForm.addEventListener('submit', async function(e) {
            e.preventDefault();
            
            const formData = new FormData(this);
            const transactionData = {
                accountId: formData.get('accountId'),
                amount: parseFloat(formData.get('amount')),
                type: formData.get('type'),
                description: formData.get('description'),
                reference: formData.get('reference'),
                metadata: {
                    reason: formData.get('reason'),
                    category: formData.get('category')
                }
            };
            
            const result = await createManualTransaction(transactionData);
            if (result) {
                // Reset form and close modal
                this.reset();
                document.querySelector('#createTransactionModal [data-bs-dismiss="modal"]').click();
                
                // Reload page to show new transaction
                setTimeout(() => {
                    window.location.reload();
                }, 1000);
            }
        });
    }
    
    // Edit transaction modal handling
    const editTransactionModal = document.getElementById('editTransactionModal');
    if (editTransactionModal) {
        editTransactionModal.addEventListener('show.bs.modal', function(event) {
            const button = event.relatedTarget;
            const transactionId = button.getAttribute('data-transaction-id');
            const transactionDesc = button.getAttribute('data-transaction-desc');
            
            document.getElementById('editTransactionId').value = transactionId;
            document.getElementById('editDescription').value = transactionDesc;
        });
    }
    
    const editTransactionForm = document.getElementById('editTransactionForm');
    if (editTransactionForm) {
        editTransactionForm.addEventListener('submit', async function(e) {
            e.preventDefault();
            
            const formData = new FormData(this);
            const transactionId = formData.get('transactionId');
            const updateData = {
                description: formData.get('description')
            };
            
            const result = await updateTransaction(transactionId, updateData);
            if (result) {
                // Close modal and reload page
                document.querySelector('#editTransactionModal [data-bs-dismiss="modal"]').click();
                setTimeout(() => {
                    window.location.reload();
                }, 1000);
            }
        });
    }
    
    // Reverse transaction modal handling
    const reverseTransactionModal = document.getElementById('reverseTransactionModal');
    if (reverseTransactionModal) {
        reverseTransactionModal.addEventListener('show.bs.modal', function(event) {
            const button = event.relatedTarget;
            const transactionId = button.getAttribute('data-transaction-id');
            const transactionDesc = button.getAttribute('data-transaction-desc');
            const transactionAmount = button.getAttribute('data-transaction-amount');
            const transactionType = button.getAttribute('data-transaction-type');
            
            document.getElementById('reverseTransactionId').value = transactionId;
            document.getElementById('reverseTransactionDesc').textContent = transactionDesc;
            document.getElementById('reverseTransactionAmount').textContent = `R ${parseFloat(transactionAmount).toLocaleString('en-ZA', { minimumFractionDigits: 2 })}`;
            document.getElementById('reverseTransactionType').textContent = transactionType;
        });
    }
    
    const reverseTransactionForm = document.getElementById('reverseTransactionForm');
    if (reverseTransactionForm) {
        reverseTransactionForm.addEventListener('submit', async function(e) {
            e.preventDefault();
            
            const formData = new FormData(this);
            const transactionId = formData.get('transactionId');
            const reason = formData.get('reason');
            
            const result = await reverseTransaction(transactionId, reason);
            if (result) {
                // Close modal and reload page
                document.querySelector('#reverseTransactionModal [data-bs-dismiss="modal"]').click();
            }
        });
    }
    
    // Hide loader on page unload/navigation
    window.addEventListener('beforeunload', function() {
        hideLoader();
    });

    // Scroll to Top functionality
    const scrollToTopBtn = document.getElementById('scrollToTop');
    const scrollableContainer = document.querySelector('.scrollable-table-container');
    
    if (scrollableContainer && scrollToTopBtn) {
        scrollableContainer.addEventListener('scroll', function() {
            if (scrollableContainer.scrollTop > 300) {
                scrollToTopBtn.classList.add('show');
            } else {
                scrollToTopBtn.classList.remove('show');
            }
        });
    }
});

// Scroll to top function
function scrollToTop() {
    const scrollableContainer = document.querySelector('.scrollable-table-container');
    if (scrollableContainer) {
        scrollableContainer.scrollTo({
            top: 0,
            behavior: 'smooth'
        });
    }
}

// Handle browser back/forward navigation
window.addEventListener('pageshow', function(event) {
    if (event.persisted) {
        hideLoader();
    }
});
</script>
